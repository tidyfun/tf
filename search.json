[{"path":"https://tidyfun.github.io/tf/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"contributing repository, please make PR dev branch verifying package still passes R CMD CHECK. tf aims provide tidyfun’s core functionality dependencies possible, please bear mind importing additional packages.","code":""},{"path":"https://tidyfun.github.io/tf/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"thou wilt, don’t dick.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2019 Fabian Scheipl, Jeff Goldsmith, Julia Wrobel Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tidyfun.github.io/tf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabian Scheipl. Author, maintainer. Jeff Goldsmith. Author. Julia Wrobel. Author. Maximilian Muecke. Contributor. Sebastian Fischer. Contributor.","code":""},{"path":"https://tidyfun.github.io/tf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Scheipl F, Goldsmith J, Wrobel J (2024). tf: S3 classes methods tidy functional data. R package version 0.2.0, https://github.com/tidyfun/tf, https://tidyfun.github.io/tf.","code":"@Manual{,   title = {tf: S3 classes and methods for tidy functional data},   author = {Fabian Scheipl and Jeff Goldsmith and Julia Wrobel},   year = {2024},   note = {R package version 0.2.0, https://github.com/tidyfun/tf},   url = {https://tidyfun.github.io/tf}, }"},{"path":"https://tidyfun.github.io/tf/index.html","id":"tf-","dir":"","previous_headings":"","what":"S3 classes and methods for tidy functional data","title":"S3 classes and methods for tidy functional data","text":"tf package provides necessary infrastructure tidyfun minimal dependencies – specifically: tidyverse-dependencies. goal tidyfun, turn, provide accessible well-documented software makes functional data analysis R easy – specifically data wrangling exploratory analysis. tf includes definitions new S3 data types vectors functional data associated methods. tf-vectors, subclasses tfd tfb, use vctrs-framework, can operated using standard functions (+, mean(), c(), etc.) well several new functions tf implement operations specific functional data (tf_smooth, tf_derive, tf_integrate). Crucially, vectors class tf can included data frames containing variables, simple reliable data manipulation. approach connected conceptual framework functional data analysis assumes complete functions unit observation. tidyfun tf, full curves kept alongside numeric, factor, observations subject.","code":""},{"path":"https://tidyfun.github.io/tf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"S3 classes and methods for tidy functional data","text":"tf currently CRAN. can install development version GitHub :","code":"# install.packages(\"pak\") pak::pak(\"tidyfun/tf\")"},{"path":"https://tidyfun.github.io/tf/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"S3 classes and methods for tidy functional data","text":"tf provides: new data types representing functional data: tfd & tfb arithmetic operators descriptive statistics data basic graphics functions tf vectors basic data wrangling functional data: reshaping list columns wide long back, interpolating different grids, filtering zooming, etc. Please see tidyfun website full documentation including vignettes etc.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/index.html","id":"new-vector-like-data-types-for-functional-data","dir":"","previous_headings":"What does it do?","what":"New vector-like data types for functional data","title":"S3 classes and methods for tidy functional data","text":"tf provides new S3-classes functional data, either raw data (class tfd tidy functional data) basis representation (class tfb tidy functional basis data). tf-objects can subsetted subassigned, computed summarized. Almost operators like ==, + * math functions like sum, log abs statistics functions like mean sd defined tf’s data structures (). tf objects basically glorified lists, work well columns data frames. makes lot easier keep data functional measurements together one object preprocessing, exploratory analysis description. time, objects actually behave like vectors functions extent, .e., can evaluated point domain, can integrated differentiated, etc. See information operations defined tf vectors.","code":""},{"path":"https://tidyfun.github.io/tf/index.html","id":"methods-for-converting-existing-data-to-tf-and-back","dir":"","previous_headings":"What does it do?","what":"Methods for converting existing data to tf and back","title":"S3 classes and methods for tidy functional data","text":"tf includes functions tfd tfb converting matrices, data frames, etc. tf vectors back. Much data wrangling functionality tidyverse-inspired way available tidyfun. See details getting data () tf format. Found bug? Got question? Missing functionality? Please let us know can make better.","code":""},{"path":"https://tidyfun.github.io/tf/reference/converters.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert functional data back to tabular data formats — as.data.frame.tf","title":"Convert functional data back to tabular data formats — as.data.frame.tf","text":"Various converters turn tfb- tfd-vectors data.frames matrices, even actual R function.","code":""},{"path":"https://tidyfun.github.io/tf/reference/converters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert functional data back to tabular data formats — as.data.frame.tf","text":"","code":"# S3 method for tf as.data.frame(x, row.names = NULL, optional = FALSE, unnest = FALSE, ...)  # S3 method for tf as.matrix(x, arg, interpolate = FALSE, ...)  # S3 method for tf as.function(x, ...)"},{"path":"https://tidyfun.github.io/tf/reference/converters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert functional data back to tabular data formats — as.data.frame.tf","text":"x tf object row.names NULL character vector giving row     names data frame.  Missing values allowed. optional used unnest TRUE, function return data.frame evaluated functions. ... additional arguments passed methods. arg vector argument values / evaluation points x. Defaults tf_arg(x). interpolate functions evaluated (.e., inter-/extrapolated) values arg original data available? relevant raw data class tfd, defaults FALSE. Basis-represented functional data tfb always \"interpolated\".","code":""},{"path":"https://tidyfun.github.io/tf/reference/converters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert functional data back to tabular data formats — as.data.frame.tf","text":".data.frame.tf: unnest FALSE (default), one-column data.frame tf-column containing x. unnest TRUE, 3-column data frame columns id (unique) names x numeric identifier, arg value, row containing one function evaluation original arg-values. .matrix.tf: matrix one row per function one column per arg. .function.tf: R function argument arg evaluates x arg returns list function values","code":""},{"path":"https://tidyfun.github.io/tf/reference/ensure_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Turns any object into a list — ensure_list","title":"Turns any object into a list — ensure_list","text":"See .","code":""},{"path":"https://tidyfun.github.io/tf/reference/ensure_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turns any object into a list — ensure_list","text":"","code":"ensure_list(x)"},{"path":"https://tidyfun.github.io/tf/reference/ensure_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turns any object into a list — ensure_list","text":"x input","code":""},{"path":"https://tidyfun.github.io/tf/reference/ensure_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turns any object into a list — ensure_list","text":"x turned list.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/fpc_wsvd.html","id":null,"dir":"Reference","previous_headings":"","what":"Eigenfunctions via weighted SVD — fpc_wsvd","title":"Eigenfunctions via weighted SVD — fpc_wsvd","text":"Compute (truncated) orthonormal eigenfunctions scores data potentially non-equidistant grid.","code":""},{"path":"https://tidyfun.github.io/tf/reference/fpc_wsvd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eigenfunctions via weighted SVD — fpc_wsvd","text":"","code":"fpc_wsvd(data, arg, pve = 0.995)  # S3 method for matrix fpc_wsvd(data, arg, pve = 0.995)  # S3 method for data.frame fpc_wsvd(data, arg, pve = 0.995)"},{"path":"https://tidyfun.github.io/tf/reference/fpc_wsvd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eigenfunctions via weighted SVD — fpc_wsvd","text":"data numeric matrix function evaluations (row one curve, NAs) arg numeric vector argument values pve percentage variance explained","code":""},{"path":"https://tidyfun.github.io/tf/reference/fpc_wsvd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eigenfunctions via weighted SVD — fpc_wsvd","text":"list entries `mu`` estimated mean function (numeric vector) `efunctions`` estimated FPCs (numeric matrix, columns represent FPCs) scores estimated FPC scores (one row per observed curve) npc many FPCs returned given pve (integer)","code":""},{"path":"https://tidyfun.github.io/tf/reference/fpc_wsvd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Eigenfunctions via weighted SVD — fpc_wsvd","text":"code adapted / inspired wsvd() function Bioconductor package mogsa Cheng Meng.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/fpc_wsvd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Eigenfunctions via weighted SVD — fpc_wsvd","text":"Cheng Meng, Fabian Scheipl","code":""},{"path":"https://tidyfun.github.io/tf/reference/functionwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize each tf in a vector — functionwise","title":"Summarize each tf in a vector — functionwise","text":"functions extract (user-specified) function-wise summary statistics entry  tf-vector. summarize vector functions argument value, see ?tfsummaries. Note tend yield lots NAs irregular tfd unless set tf_evaluator()-function inter- extrapolation beforehand.","code":""},{"path":"https://tidyfun.github.io/tf/reference/functionwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize each tf in a vector — functionwise","text":"","code":"tf_fwise(x, .f, arg = tf_arg(x), ...)  tf_fmax(x, arg = tf_arg(x), na.rm = FALSE)  tf_fmin(x, arg = tf_arg(x), na.rm = FALSE)  tf_fmedian(x, arg = tf_arg(x), na.rm = FALSE)  tf_frange(x, arg = tf_arg(x), na.rm = FALSE, finite = FALSE)  tf_fmean(x, arg = tf_arg(x))  tf_fvar(x, arg = tf_arg(x))  tf_fsd(x, arg = tf_arg(x))  tf_crosscov(x, y, arg = tf_arg(x))  tf_crosscor(x, y, arg = tf_arg(x))"},{"path":"https://tidyfun.github.io/tf/reference/functionwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize each tf in a vector — functionwise","text":"x tf object .f function formula applied entry x, see purrr::as_mapper() Details. arg defaults standard argument values x ... additional arguments purrr::as_mapper() na.rm logical indicating whether missing values     removed. finite logical, indicating non-finite elements     omitted. y tf object","code":""},{"path":"https://tidyfun.github.io/tf/reference/functionwise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize each tf in a vector — functionwise","text":"list (vector) length x respective summaries","code":""},{"path":"https://tidyfun.github.io/tf/reference/functionwise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize each tf in a vector — functionwise","text":"tf_fwise turns x list data.frames columns arg values internally, function/formula .f gets data.frame .x columns, see examples source code tf_fmin(), tf_fmax(), etc","code":""},{"path":"https://tidyfun.github.io/tf/reference/functionwise.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Summarize each tf in a vector — functionwise","text":"tf_fwise(): User-specified function-wise summary statistics tf_fmax(): maximal value function tf_fmin(): minimal value function tf_fmedian(): median value function tf_frange(): range values function tf_fmean(): mean function: \\(\\tfrac{1}{|T|}\\int_T x_i(t) dt\\) tf_fvar(): variance function: \\(\\tfrac{1}{|T|}\\int_T (x_i(t) - \\bar x(t))^2 dt\\) tf_fsd(): standard deviation function: \\(\\sqrt{\\tfrac{1}{|T|}\\int_T (x_i(t) - \\bar x(t))^2 dt}\\) tf_crosscov(): cross-covariances two functional vectors: \\(\\tfrac{1}{|T|}\\int_T (x_i(t) - \\bar x(t)) (y_i(t)-\\bar y(t)) dt\\) tf_crosscor(): cross-correlation two functional vectors: tf_crosscov(x, y) / (tf_fsd(x) * tf_fsd(y))","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/functionwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize each tf in a vector — functionwise","text":"","code":"x <- tf_rgp(3) layout(t(1:3)) plot(x, col = 1:3) #  each function's values to [0,1]: x_clamp <- (x - tf_fmin(x)) / (tf_fmax(x) - tf_fmin(x)) plot(x_clamp, col = 1:3) # standardize each function to have mean / integral 0 and sd 1: x_std <- (x - tf_fmean(x)) / tf_fsd(x) tf_fvar(x_std) == c(1, 1, 1) #>     1     2     3  #>  TRUE FALSE  TRUE  plot(x_std, col = 1:3)  # Custom functions: # 80%tiles of each function's values: tf_fwise(x, ~ quantile(.x$value, .8)) |> unlist() #>     1.80%     2.80%     3.80%  #> 0.3911169 1.5431315 0.8560247  # minimal value of each function for t >.5 tf_fwise(x, ~ min(.x$value[.x$arg > .5])) |> unlist() #>          1          2          3  #> -0.2591620  0.7030887  0.1492651   tf_crosscor(x, -x) #>  1  2  3  #> -1 -1 -1  tf_crosscov(x, x) == tf_fvar(x) #>    1    2    3  #> TRUE TRUE TRUE"},{"path":"https://tidyfun.github.io/tf/reference/in_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Find out if values are inside given bounds — in_range","title":"Find out if values are inside given bounds — in_range","text":"in_range infix-equivalent %inr% return TRUE values numeric vector f within range values r.","code":""},{"path":"https://tidyfun.github.io/tf/reference/in_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find out if values are inside given bounds — in_range","text":"","code":"in_range(f, r)  f %inr% r"},{"path":"https://tidyfun.github.io/tf/reference/in_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find out if values are inside given bounds — in_range","text":"f numeric vector r numeric vector used specify range, minimum maximum r used.","code":""},{"path":"https://tidyfun.github.io/tf/reference/in_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find out if values are inside given bounds — in_range","text":"logical vector length f","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/prep_plotting_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess evaluation grid for plotting — prep_plotting_arg","title":"Preprocess evaluation grid for plotting — prep_plotting_arg","text":"(internal function exported re-use upstream packages)","code":""},{"path":"https://tidyfun.github.io/tf/reference/prep_plotting_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess evaluation grid for plotting — prep_plotting_arg","text":"","code":"prep_plotting_arg(f, n_grid)"},{"path":"https://tidyfun.github.io/tf/reference/prep_plotting_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess evaluation grid for plotting — prep_plotting_arg","text":"f tf-object n_grid length evaluation grid","code":""},{"path":"https://tidyfun.github.io/tf/reference/prep_plotting_arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess evaluation grid for plotting — prep_plotting_arg","text":"semi-regular grid rounded appropriate resolution","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tf: S3 classes and methods for tidy functional data — tf-package","title":"tf: S3 classes and methods for tidy functional data — tf-package","text":"tf light-weight package dependencies provides class definitions methods infrastructure tidyfun -- tf gives : new S3 data types representing (vectors ) functional data: tfd() & tfb() arithmetic operators data (Ops.tf()), simple descriptive statistics: e.g. mean.tf(), median.tf() base graphics functions data: plot.tf() functions smoothing (tf_smooth.tfd()), differentiation tf_derive.tfd()) integration (tf_derive.tfd()) goal add-package tidyfun make data wrangling exploratory analysis functional data R quick easy, using tidyverse syntax standards.  Please also install tidyfun full functionality access full documentation including number vignettes case studies, visit tidyfun website.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tf: S3 classes and methods for tidy functional data — tf-package","text":"Maintainer: Fabian Scheipl fabian.scheipl@googlemail.com (ORCID) Authors: Jeff Goldsmith Julia Wrobel (ORCID) contributors: Maximilian Muecke (ORCID) [contributor] Sebastian Fischer (ORCID) [contributor]","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_approx.html","id":null,"dir":"Reference","previous_headings":"","what":"Inter- and extrapolation functions for tfd-objects — tf_approx_linear","title":"Inter- and extrapolation functions for tfd-objects — tf_approx_linear","text":"currently available evaluator-functions tfd-objects, control entries inter-/extrapolated previously unseen arg-values. merely wrappers around zoo::na.fill(), zoo::na.approx(), etc... Note meant called directly -- internal functions used tf_evaluate.tfd() thing. list: tf_approx_linear linear interpolation without extrapolation (.e., zoo::na.approx() na.rm = FALSE)  -- default, tf_approx_spline cubic spline interpolation, (.e., zoo::na.spline() na.rm = FALSE), tf_approx_none order inter-/extrapolate ever (.e., zoo::na.fill() fill = NA) tf_approx_fill_extend linear interpolation constant extrapolation (.e., zoo::na.fill() fill = \"extend\") tf_approx_locf \"last observation carried forward\"  (.e., zoo::na.locf() na.rm = FALSE tf_approx_nocb \"next observation carried backward\" (.e., zoo::na.locf() na.rm = FALSE, fromLast = TRUE). implementing , see source code tf:::zoo_wrapper.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_approx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inter- and extrapolation functions for tfd-objects — tf_approx_linear","text":"","code":"tf_approx_linear(x, arg, evaluations)  tf_approx_spline(x, arg, evaluations)  tf_approx_none(x, arg, evaluations)  tf_approx_fill_extend(x, arg, evaluations)  tf_approx_locf(x, arg, evaluations)  tf_approx_nocb(x, arg, evaluations)"},{"path":"https://tidyfun.github.io/tf/reference/tf_approx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inter- and extrapolation functions for tfd-objects — tf_approx_linear","text":"x new arg values tf_approximate function arg arg values evaluations evaluations function's values arg","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional Data Depth — tf_depth","title":"Functional Data Depth — tf_depth","text":"Data depths functional data. Currently implemented: Modified Band-2 Depth, see reference.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional Data Depth — tf_depth","text":"","code":"tf_depth(x, arg, depth = \"MBD\", na.rm = TRUE, ...)  # S3 method for matrix tf_depth(x, arg, depth = \"MBD\", na.rm = TRUE, ...)  # S3 method for tf tf_depth(x, arg, depth = \"MBD\", na.rm = TRUE, ...)"},{"path":"https://tidyfun.github.io/tf/reference/tf_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional Data Depth — tf_depth","text":"x tf (matrix evaluations) arg grid evaluation points depth currently available: \"MBD\", .e. modified band depth na.rm TRUE remove missing observations? ... arguments handed function computing respective tf_depth.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional Data Depth — tf_depth","text":"vector tf_depth values","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_depth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Functional Data Depth — tf_depth","text":"Sun, Y., Genton, M. G., & Nychka, D. W. (2012). Exact fast computation band tf_depth large functional datasets: quickly can one million curves ranked?. Stat, 1(1), 68-74. Lopez-Pintado, S. Romo, J. (2009). Concept Depth Functional Data. Journal American Statistical Association, 104, 718-734.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_derive.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiating functional data: approximating derivative functions — tf_derive","title":"Differentiating functional data: approximating derivative functions — tf_derive","text":"Derivatives tf-objects use finite differences evaluations tfd finite differences basis functions tfb.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_derive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiating functional data: approximating derivative functions — tf_derive","text":"","code":"tf_derive(f, arg, order = 1, ...)  # S3 method for matrix tf_derive(f, arg, order = 1, ...)  # S3 method for tfd tf_derive(f, arg, order = 1, ...)  # S3 method for tfb_spline tf_derive(f, arg, order = 1, ...)  # S3 method for tfb_fpc tf_derive(f, arg, order = 1, ...)"},{"path":"https://tidyfun.github.io/tf/reference/tf_derive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differentiating functional data: approximating derivative functions — tf_derive","text":"f tf-object arg grid use finite differences. arg returned object tfd-inputs, see Details. order order differentiation. Maximal value tfb_spline 2. ... used","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_derive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differentiating functional data: approximating derivative functions — tf_derive","text":"tf (slightly different arg basis derivatives, see Details)","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_derive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiating functional data: approximating derivative functions — tf_derive","text":"derivatives tfd objects use centered finite differences, e.g. first derivatives \\(f'((t_i + t_{+1})/2) \\approx \\frac{f(t_i) + f(t_{+1})}{t_{+1} - t_i}\\), domains differentiated tfd shrink (slightly) ends. Unless tfd rather fine regular grid, representing data suitable basis representation tfb() computing derivatives integrals usually preferable. Note , spline bases like \"cr\" \"tp\" always begin/end linearly, computing second derivatives produce artefacts outer limits functions' domain due boundary constraints. Basis \"bs\" problem sufficiently high orders, tends yield slightly less stable fits.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_derive.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Differentiating functional data: approximating derivative functions — tf_derive","text":"tf_derive(matrix): row-wise finite differences tf_derive(tfd): derivatives finite differencing. tf_derive(tfb_spline): derivatives finite differencing. tf_derive(tfb_fpc): derivatives finite differencing.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_evaluate.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate tf-vectors for given argument values — tf_evaluate","title":"Evaluate tf-vectors for given argument values — tf_evaluate","text":"Also used internally [-operator tf data (see ?tfbrackets) evaluate object, see examples.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_evaluate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate tf-vectors for given argument values — tf_evaluate","text":"","code":"tf_evaluate(object, arg, ...)  # S3 method for default tf_evaluate(object, arg, ...)  # S3 method for tfd tf_evaluate(object, arg, evaluator = tf_evaluator(object), ...)  # S3 method for tfb tf_evaluate(object, arg, ...)"},{"path":"https://tidyfun.github.io/tf/reference/tf_evaluate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate tf-vectors for given argument values — tf_evaluate","text":"object tf, data.frame-like object tf columns. arg optional evaluation grid (vector list vectors). Defaults tf_arg(object), implicitly. ... used evaluator optional. function use inter/extrapolating tfd. Defaults tf_evaluator(object). See e.g. tf_approx_linear() details.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_evaluate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate tf-vectors for given argument values — tf_evaluate","text":"list numeric vectors containing function evaluations arg.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_evaluate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate tf-vectors for given argument values — tf_evaluate","text":"","code":"f <- tf_rgp(3, arg = seq(0, 1, length.out = 11)) tf_evaluate(f) |> str() #> List of 3 #>  $ 1: num [1:11] 0.264 0.717 0.802 0.655 0.5 ... #>  $ 2: num [1:11] -2.121 -1.908 -1.396 -0.729 -0.262 ... #>  $ 3: num [1:11] 0.291 -0.29 -0.444 -0.191 -0.105 ... tf_evaluate(f, arg = 0.5) |> str() #> List of 3 #>  $ 1: num 0.366 #>  $ 2: num -0.0252 #>  $ 3: num -0.61 # equivalent, as matrix: f[, 0.5] #>           0.5 #> 1  0.36585021 #> 2 -0.02516243 #> 3 -0.61012227 #> attr(,\"arg\") #> [1] 0.5 new_grid <- seq(0, 1, length.out = 6) tf_evaluate(f, arg = new_grid) |> str() #> List of 3 #>  $ 1: num [1:6] 0.264 0.802 0.5 0.104 -0.144 ... #>  $ 2: num [1:6] -2.1205 -1.3965 -0.2621 0.0976 0.9949 ... #>  $ 3: num [1:6] 0.291 -0.444 -0.105 -0.962 0.55 ... # equivalent, as matrix: f[, new_grid] #>            0        0.2        0.4         0.6        0.8         1 #> 1  0.2641399  0.8016938  0.5003438  0.10448947 -0.1438695 0.1386855 #> 2 -2.1205464 -1.3964857 -0.2620896  0.09757397  0.9949393 1.3542389 #> 3  0.2909722 -0.4444448 -0.1050264 -0.96190135  0.5496152 2.1038015 #> attr(,\"arg\") #> [1] 0.0 0.2 0.4 0.6 0.8 1.0"},{"path":"https://tidyfun.github.io/tf/reference/tf_integrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrals and anti-derivatives of functional data — tf_integrate","title":"Integrals and anti-derivatives of functional data — tf_integrate","text":"Integrals tf-objects computed simple quadrature (trapezoid rule). default scalar definite integral \\(\\int^{upper}_{lower}f(s)ds\\) returned (option definite = TRUE), alternatively definite = FALSE anti-derivative [lower, upper], e.g. tfd tfb object representing \\(F(t) \\approx \\int^{t}_{lower}f(s)ds\\), \\(t \\\\)[lower, upper], returned.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_integrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrals and anti-derivatives of functional data — tf_integrate","text":"","code":"tf_integrate(f, arg, lower, upper, ...)  # S3 method for default tf_integrate(f, arg, lower, upper, ...)  # S3 method for tfd tf_integrate(   f,   arg,   lower = tf_domain(f)[1],   upper = tf_domain(f)[2],   definite = TRUE,   ... )  # S3 method for tfb tf_integrate(   f,   arg,   lower = tf_domain(f)[1],   upper = tf_domain(f)[2],   definite = TRUE,   ... )"},{"path":"https://tidyfun.github.io/tf/reference/tf_integrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrals and anti-derivatives of functional data — tf_integrate","text":"f tf-object arg (optional) grid use quadrature. lower lower limits integration range. definite=TRUE, can vector length f. upper upper limits integration range (see definite arg / Description). definite=TRUE, can vector length f. ... used definite definite integral  returned (default) antiderivative. See Description.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_integrate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrals and anti-derivatives of functional data — tf_integrate","text":"definite = TRUE, definite integrals functions f. definite = FALSE tf-inputs, tf object containing anti-derivatives","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_interpolate.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-evaluate tf-objects on new evaluation grid. — tf_interpolate","title":"Re-evaluate tf-objects on new evaluation grid. — tf_interpolate","text":"Change internal representation tf-object uses different grid evaluation points (arg). Useful thinning dense grids make data smaller filling sparse grids make derivatives/integrals locating extrema zero crossings accurate (... interpolation works well ...) making irregular functional data () regular data. tfd-objects, just syntactic sugar tfd(object, arg = arg). tfb-objects, re-evaluates basis functions new grid. , resolution resulting object may change. NB: reliably impute irregular data regular, common grid, better FPCA-based imputation model-based approaches cases.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_interpolate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-evaluate tf-objects on new evaluation grid. — tf_interpolate","text":"","code":"tf_interpolate(object, arg, ...)  # S3 method for tfb tf_interpolate(object, arg, ...)  # S3 method for tfd tf_interpolate(object, arg, ...)"},{"path":"https://tidyfun.github.io/tf/reference/tf_interpolate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-evaluate tf-objects on new evaluation grid. — tf_interpolate","text":"object object inheriting tf arg vector argument values evaluate functions object ... additional arguments handed tfd tfb, construction returned object","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_interpolate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-evaluate tf-objects on new evaluation grid. — tf_interpolate","text":"tfd tfb object new grid given arg","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_interpolate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-evaluate tf-objects on new evaluation grid. — tf_interpolate","text":"","code":"# thinning out a densely observed tfd dense <- tf_rgp(10, arg = seq(0, 1, length.out = 1001)) less_dense <- tf_interpolate(dense, arg = seq(0, 1, length.out = 101))  # filling out sparse data (use a suitable evaluator -function!) sparse <- tf_rgp(10, arg = seq(0, 5, length.out = 21)) plot(sparse) # change evaluator for better interpolation tfd(sparse, evaluator = tf_approx_spline) |>   tf_interpolate(arg = seq(0, 5, length.out = 201)) |>   lines(col = 2)   set.seed(1860) sparse_irregular <- tf_rgp(5) |>   tf_sparsify(0.5) |>   tf_jiggle() tf_interpolate(sparse_irregular, arg = seq(0, 1, length.out = 51)) #> Warning: 33 evaluations were NA, returning irregular tfd. #> tfd[5] on (0,1) based on 39 to 48 (mean: 44) evaluations each #> inter-/extrapolation by tf_approx_linear  #> 1: (0.14,  -1.4);(0.16,  -1.3);(0.18,  -1.3); ... #> 2: (0.02,   1.7);(0.04,   1.6);(0.06,   1.5); ... #> 3: (0.08,  0.93);(0.10,  1.03);(0.12,  1.11); ... #> 4: (0.04, -0.14);(0.06, -0.29);(0.08, -0.40); ... #> 5: (0.12, 0.049);(0.14,-0.035);(0.16,-0.098); ..."},{"path":"https://tidyfun.github.io/tf/reference/tf_jiggle.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a tf (more) irregular — tf_jiggle","title":"Make a tf (more) irregular — tf_jiggle","text":"Randomly create irregular functional data regular ones. jiggle randomly moving around arg-values. tfd. sparsify setting (100*dropout)% values NA.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_jiggle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a tf (more) irregular — tf_jiggle","text":"","code":"tf_jiggle(f, amount = 0.4, ...)  tf_sparsify(f, dropout = 0.5, ...)"},{"path":"https://tidyfun.github.io/tf/reference/tf_jiggle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a tf (more) irregular — tf_jiggle","text":"f tfd object amount far away original grid points can new grid points lie, (relative original distance neighboring grid points). Defaults 40% (0.4) original grid distances. Must lower 0.5 ... additional args returned tfd tf_jiggle dropout many values f drop, defaults 50%.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_jiggle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a tf (more) irregular — tf_jiggle","text":"(irregular) tfd object","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_rgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian Process random generator — tf_rgp","title":"Gaussian Process random generator — tf_rgp","text":"Generates n realizations zero-mean Gaussian process. function also accepts user-defined covariance functions (without \"nugget\" effect, see cov), implemented defaults scale parameter \\(\\phi\\), order \\(o\\) nugget effect variance \\(\\sigma^2\\) : squared exponential covariance \\(Cov(x(t), x(t')) = \\exp(-(t-t')^2)/\\phi) + \\sigma^2 \\delta_{t}(t')\\). Wiener process covariance \\(Cov(x(t), x(t')) = \\min(t',t)/\\phi + \\sigma^2 \\delta_{t}(t')\\), Matèrn process covariance \\(Cov(x(t), x(t')) = \\tfrac{2^{1-o}}{\\Gamma(o)} (\\tfrac{\\sqrt{2o}|t-t'|}{\\phi})^o \\text{Bessel}_o(\\tfrac{\\sqrt{2o}|t-t'|}{s}) + \\sigma^2 \\delta_{t}(t')\\)","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_rgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian Process random generator — tf_rgp","text":"","code":"tf_rgp(   n,   arg = 51L,   cov = c(\"squareexp\", \"wiener\", \"matern\"),   scale = diff(range(arg))/10,   nugget = scale/200,   order = 1.5 )"},{"path":"https://tidyfun.github.io/tf/reference/tf_rgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian Process random generator — tf_rgp","text":"n many realizations draw arg vector evaluation points (arg return object). Defaults (0, 0.02, 0.04, ..., 1). given single integer (forget L...), creates  regular grid length (0,1). cov type covariance function use. Implemented defaults \"squareexp\", \"wiener\", \"matern\", see Description. Can also vectorized function returning \\(Cov(x(t), x(t'))\\) without nugget effect pairs inputs t t'. scale scale parameter (see Description). Defaults width domain divided 10. nugget nugget effect additional white noise / unstructured variability. Defaults scale/200 (: little white noise). order order Matèrn covariance (used, must >0), defaults 1.5. higher, smoother process. Evaluation covariance function becomes numerically unstable large (>20) order, use \"squareexp\".","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_rgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian Process random generator — tf_rgp","text":"tfd-vector length n","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple smoothing of tf objects — tf_smooth","title":"Simple smoothing of tf objects — tf_smooth","text":"Apply running means medians, lowess Savitzky-Golay filtering smooth functional data. nothing tfb-objects, smoothed using smaller basis / stronger penalty.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple smoothing of tf objects — tf_smooth","text":"","code":"tf_smooth(x, ...)  # S3 method for tfb tf_smooth(x, ...)  # S3 method for tfd tf_smooth(x, method = c(\"lowess\", \"rollmean\", \"rollmedian\", \"savgol\"), ...)"},{"path":"https://tidyfun.github.io/tf/reference/tf_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple smoothing of tf objects — tf_smooth","text":"x tf object containing functional data ... arguments respective method. See Details. method one \"lowess\" (see stats::lowess()), \"rollmean\", \"rollmedian\" (see zoo::rollmean()) \"savgol\" (see pracma::savgol())","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple smoothing of tf objects — tf_smooth","text":"smoothed version input. methods/options, smoothed functions may shorter original ones (ends).","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple smoothing of tf objects — tf_smooth","text":"tf_smooth.tfd overrides/automatically sets defaults used methods: lowess uses span parameter f = 0.15 (instead 0.75) default. rollmean/median use window size k = $<$number grid points$>$/20 (.e., nearest odd integer ) sets fill=   \"extend\" (.e., constant extrapolation replace missing values extremes domain) default. Use fill= NA zoo's default behavior shortening smoothed series. savgol uses window size k = $<$number grid points$>$/10 (.e., nearest odd integer ).","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple smoothing of tf objects — tf_smooth","text":"","code":"library(zoo) #>  #> Attaching package: ‘zoo’ #> The following objects are masked from ‘package:base’: #>  #>     as.Date, as.Date.numeric library(pracma) f <- tf_sparsify(tf_jiggle(tf_rgp(4, 201, nugget = 0.05))) f_lowess <- tf_smooth(f, \"lowess\") #> using f = 0.15 as smoother span for lowess # these methods ignore the distances between arg-values: f_mean <- tf_smooth(f, \"rollmean\") #> Warning: non-equidistant arg-values in ‘f’ ignored by rollmean. #> using k = 5 observations for rolling data window. #> setting fill = 'extend' for start/end values. f_median <- tf_smooth(f, \"rollmean\", k = 31) #> Warning: non-equidistant arg-values in ‘f’ ignored by rollmean. #> setting fill = 'extend' for start/end values. f_sg <- tf_smooth(f, \"savgol\", fl = 31) #> Warning: non-equidistant arg-values in ‘f’ ignored by savgol. layout(t(1:4)) plot(f, points = FALSE, main = \"original\") plot(f_lowess,   points = FALSE, col = \"blue\", main = \"lowess (default,\\n span 0.9 in red)\" ) lines(tf_smooth(f, \"lowess\", f = 0.9), col = \"red\", alpha = 0.2) plot(f_mean,   points = FALSE, col = \"blue\", main = \"rolling means &\\n medians (red)\" ) lines(f_median, col = \"red\", alpha = 0.2) # note constant extrapolation at both ends! plot(f, points = FALSE, main = \"orginal and\\n savgol (red)\") lines(f_sg, col = \"red\")"},{"path":"https://tidyfun.github.io/tf/reference/tf_where.html","id":null,"dir":"Reference","previous_headings":"","what":"Find out where functional data fulfills certain conditions. — tf_where","title":"Find out where functional data fulfills certain conditions. — tf_where","text":"tf_where allows define logical expression function values returns argument values condition true.tf_anywhere syntactic sugar tf_where return = \"\" get logical flag function condition TRUE anywhere, see .","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find out where functional data fulfills certain conditions. — tf_where","text":"","code":"tf_where(f, cond, return = c(\"all\", \"first\", \"last\", \"range\", \"any\"), arg)  tf_anywhere(f, cond, arg)"},{"path":"https://tidyfun.github.io/tf/reference/tf_where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find out where functional data fulfills certain conditions. — tf_where","text":"f tf object cond logical expression value (/arg) defines condition functions, see examples details. return entry f, tf_where either returns arg cond true, first, last range logical flags whether functions fullfill condition anywhere. \"range\", note cond may true arg values range, though, checked. arg optional arg-values evaluate f check cond, defaults tf_arg(f).","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find out where functional data fulfills certain conditions. — tf_where","text":"depends  return: return = \"\", .e, anywhere: logical vector length f. return = \"\": list vectors length f, empty vectors functions  never fulfill condition. return = \"range\": data frame columns \"begin\" \"end\". else, numeric vector length f NA entries f nowhere fulfill condition.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find out where functional data fulfills certain conditions. — tf_where","text":"Entries f fulfill cond anywhere yield numeric(0).cond  evaluated base::subset()-statement data.frame containing single entry f columns arg value, usual dplyr tricks available well, see examples. condition evaluates NA NA-entries f.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_where.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find out where functional data fulfills certain conditions. — tf_where","text":"","code":"lin <- 1:4 * tfd(seq(-1, 1, length.out = 11), seq(-1, 1, length.out = 11)) tf_where(lin, value %inr% c(-1, 0.5)) #> [[1]] #> [1] -1.0 -0.8 -0.6 -0.4 -0.2  0.0  0.2  0.4 #>  #> [[2]] #> [1] -0.4 -0.2  0.0  0.2 #>  #> [[3]] #> [1] -0.2  0.0 #>  #> [[4]] #> [1] -0.2  0.0 #>  tf_where(lin, value %inr% c(-1, 0.5), \"range\") #>   begin end #> 1  -1.0 0.4 #> 2  -0.4 0.2 #> 3  -0.2 0.0 #> 4  -0.2 0.0 a <- 1 tf_where(lin, value > a, \"first\") #> [1]  NA 0.6 0.4 0.4 tf_where(lin, value < a, \"last\") #> [1] 0.8 0.4 0.2 0.2 tf_where(lin, value > 2, \"any\") #> [1] FALSE FALSE  TRUE  TRUE tf_anywhere(lin, value > 2) #> [1] FALSE FALSE  TRUE  TRUE  set.seed(4353) f <- tf_rgp(5, 11) plot(f, pch = as.character(1:5), points = TRUE)  tf_where(f, value == max(value)) #> $`1` #> [1] 0 #>  #> $`2` #> [1] 0.4 #>  #> $`3` #> [1] 0.2 #>  #> $`4` #> [1] 0.6 #>  #> $`5` #> [1] 0.1 #>  # where is the function increasing/decreasing? tf_where(f, value > dplyr::lag(value, 1, value[1])) #> $`1` #> [1] 0.4 0.5 0.6 #>  #> $`2` #> [1] 0.1 0.2 0.3 0.4 #>  #> $`3` #> [1] 0.1 0.2 0.6 0.7 0.8 0.9 1.0 #>  #> $`4` #> [1] 0.1 0.2 0.3 0.4 0.5 0.6 1.0 #>  #> $`5` #> [1] 0.1 0.7 0.8 0.9 1.0 #>  tf_where(f, value < dplyr::lead(value, 1, tail(value, 1))) #> $`1` #> [1] 0.3 0.4 0.5 #>  #> $`2` #> [1] 0.0 0.1 0.2 0.3 #>  #> $`3` #> [1] 0.0 0.1 0.5 0.6 0.7 0.8 0.9 #>  #> $`4` #> [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.9 #>  #> $`5` #> [1] 0.0 0.6 0.7 0.8 0.9 #>  # where are the (interior) extreme points (sign changes of `diff(value)`)? tf_where(   f,   sign(c(diff(value)[1], diff(value))) !=     sign(c(diff(value), tail(diff(value), 1))) ) #> $`1` #> [1] 0.3 0.6 #>  #> $`2` #> [1] 0.4 #>  #> $`3` #> [1] 0.2 0.5 #>  #> $`4` #> [1] 0.6 0.9 #>  #> $`5` #> [1] 0.1 0.6 #>  # where in its second half is the function positive? tf_where(f, arg > 0.5 & value > 0) #> $`1` #> numeric(0) #>  #> $`2` #> [1] 0.6 0.7 0.8 0.9 1.0 #>  #> $`3` #> [1] 0.9 1.0 #>  #> $`4` #> [1] 0.6 0.7 0.8 0.9 1.0 #>  #> $`5` #> [1] 1 #>  # does the function ever exceed? tf_anywhere(f, value > 1) #>     1     2     3     4     5  #> FALSE  TRUE FALSE  TRUE FALSE"},{"path":"https://tidyfun.github.io/tf/reference/tf_zoom.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to zoom in/out on functions — tf_zoom","title":"Functions to zoom in/out on functions — tf_zoom","text":"used redefine restrict domain tf objects.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_zoom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to zoom in/out on functions — tf_zoom","text":"","code":"tf_zoom(f, begin, end, ...)  # S3 method for tfd tf_zoom(f, begin = tf_domain(f)[1], end = tf_domain(f)[2], ...)  # S3 method for tfb tf_zoom(f, begin = tf_domain(f)[1], end = tf_domain(f)[2], ...)  # S3 method for tfb_fpc tf_zoom(f, begin = tf_domain(f)[1], end = tf_domain(f)[2], ...)"},{"path":"https://tidyfun.github.io/tf/reference/tf_zoom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to zoom in/out on functions — tf_zoom","text":"f tf-object begin numeric vector length 1 length(f). Defaults lower limit domain f. end numeric vector length 1 length(f). Defaults upper limit domain f. ... used","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_zoom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to zoom in/out on functions — tf_zoom","text":"object like f new domain (potentially). Note regular functional data functions basis representation turned irregular tfd-objects iff begin end scalar.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_zoom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to zoom in/out on functions — tf_zoom","text":"","code":"x <- tf_rgp(10) plot(x) tf_zoom(x, 0.5, 0.9) #> tfd[10] on (0.5,0.9) based on 21 evaluations each #> interpolation by tf_approx_linear  #> 1: (0.50,-0.062);(0.52,-0.141);(0.54,-0.226); ... #> 2: (0.50,  0.53);(0.52,  0.53);(0.54,  0.51); ... #> 3: (0.50, -0.50);(0.52, -0.54);(0.54, -0.58); ... #> 4: (0.50, -0.26);(0.52, -0.22);(0.54, -0.25); ... #> 5: (0.50, -0.70);(0.52, -0.70);(0.54, -0.67); ... #>     [....]   (5 not shown) tf_zoom(x, 0.5, 0.9) |> lines(col = \"red\") tf_zoom(x, seq(0, 0.5, length.out = 10), seq(0.5, 1, length.out = 10)) |>   lines(col = \"blue\", lty = 3)"},{"path":"https://tidyfun.github.io/tf/reference/tfb.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructors for functional data in basis representation — tfb","title":"Constructors for functional data in basis representation — tfb","text":"Various constructors tfb-vectors different kinds inputs.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructors for functional data in basis representation — tfb","text":"","code":"tfb(data, basis = c(\"spline\", \"fpc\", \"wavelet\"), ...)  tfb_wavelet(data, ...)  as.tfb(data, basis = c(\"spline\", \"fpc\"), ...)"},{"path":"https://tidyfun.github.io/tf/reference/tfb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructors for functional data in basis representation — tfb","text":"data matrix, data.frame list suitable shape, another tf-object containing functional data. basis either \"spline\" (see tfb_spline(), default) \"fpc\" (see tfb_fpc()). (wavelet implemented yet) ... arguments tfb_spline() tfb_fpc()","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructors for functional data in basis representation — tfb","text":"tfb-object (data.frame/matrix conversion functions, obviously.)","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructors for functional data in basis representation — tfb","text":"tfb wrapper functions set spline-, principal component- wavelet-based representations functional data. three, input data \\(x_i(t)\\) represented weighted sums set common basis functions \\(B_k(t); k = 1,\\dots, K\\) identical observations weight coefficient vectors \\(b_i = (b_{i1}, \\dots, b_{iK})\\) estimated observation: \\(x_i(t) \\approx \\sum_k B_k(t) b_{ik}\\). Depending value basis, basis functions \\(B(t)\\) either spline functions first estimated eigenfunctions covariance operator \\(x(t)\\) (fpc) wavelets (wavelet). See tfb_spline() details spline basis representation (default). See tfb_fpc() using functional principal component representation orthonormal basis estimated data instead.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tfb_fpc.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional data in FPC-basis representation — tfb_fpc","title":"Functional data in FPC-basis representation — tfb_fpc","text":"functions perform (functional) principal component analysis (FPCA) input data return tfb_fpc tf-object uses empirical eigenfunctions basis functions representing data. default, simple, smoothed, truncated weighted SVD functions used compute (\"method = fpc_wsvd\"). Note suitable regular data observed (necessarily equidistant) grid. See Details / Example possible alternatives extensions.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_fpc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional data in FPC-basis representation — tfb_fpc","text":"","code":"tfb_fpc(data, ...)  # S3 method for data.frame tfb_fpc(   data,   id = 1,   arg = 2,   value = 3,   domain = NULL,   method = fpc_wsvd,   resolution = NULL,   ... )  # S3 method for matrix tfb_fpc(   data,   arg = NULL,   domain = NULL,   method = fpc_wsvd,   resolution = NULL,   ... )  # S3 method for numeric tfb_fpc(   data,   arg = NULL,   domain = NULL,   method = fpc_wsvd,   resolution = NULL,   ... )  # S3 method for tf tfb_fpc(data, arg = NULL, method = fpc_wsvd, ...)  # S3 method for default tfb_fpc(   data,   arg = NULL,   domain = NULL,   method = fpc_wsvd,   resolution = NULL,   ... )"},{"path":"https://tidyfun.github.io/tf/reference/tfb_fpc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional data in FPC-basis representation — tfb_fpc","text":"data matrix, data.frame list suitable shape, another tf-object containing functional data. ... arguments method computes (regularized/smoothed) FPCA. Unless set user, uses proportion variance explained pve = 0.995 determine truncation levels. id name number column defining data belong function. arg numeric, list numerics. evaluation grid. See Details interplay resolution. data.frame-method: name/number column defining evaluation grid. matrix method try guess suitable arg-values column names data arg supplied. methods fall back integer sequences (1:<length data>) default provided. value name number column containing function evaluations. domain range arg. method function use computes eigenfunctions scores. Defaults fpc_wsvd(), gives unsmoothed eigenfunctions. resolution resolution evaluation grid. See details tfd().","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_fpc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional data in FPC-basis representation — tfb_fpc","text":"object class tfb_fpc, inheriting tfb. basis used tfb_fpc tfd-vector containing estimated mean eigenfunctions.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_fpc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functional data in FPC-basis representation — tfb_fpc","text":"\"factorization\" method accepts data.frame columns id, arg, value containing functional data returns list structured like return object fpc_wsvd() can used `method`` argument, see example .","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_fpc.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Functional data in FPC-basis representation — tfb_fpc","text":"tfb_fpc(default): convert tfb: default method, returning prototype data NULL","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tfb_fpc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functional data in FPC-basis representation — tfb_fpc","text":"","code":"# Apply FPCA for sparse data using refund::fpca.sc: set.seed(99290) # create sparse data: data <- tf_rgp(15) |>   tf_sparsify() |>   as.data.frame(unnest = TRUE) # wrap refund::fpca_sc for use as FPCA method in tfb_fpc: fpca_sc_wrapper <- function(data, arg, pve = 0.995, ...) {   data_mat <- tf:::df_2_mat(data)   fpca <- refund::fpca.sc(     Y = data_mat, argvals = attr(data_mat, \"arg\"), pve = pve, ...   )   fpca[c(\"mu\", \"efunctions\", \"scores\", \"npc\")] }"},{"path":"https://tidyfun.github.io/tf/reference/tfb_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Spline-based representation of functional data — tfb_spline","title":"Spline-based representation of functional data — tfb_spline","text":"Represent curves weighted sum spline basis functions.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spline-based representation of functional data — tfb_spline","text":"","code":"tfb_spline(data, ...)  # S3 method for data.frame tfb_spline(   data,   id = 1,   arg = 2,   value = 3,   domain = NULL,   penalized = TRUE,   global = FALSE,   resolution = NULL,   ... )  # S3 method for matrix tfb_spline(   data,   arg = NULL,   domain = NULL,   penalized = TRUE,   global = FALSE,   resolution = NULL,   ... )  # S3 method for numeric tfb_spline(   data,   arg = NULL,   domain = NULL,   penalized = TRUE,   global = FALSE,   resolution = NULL,   ... )  # S3 method for list tfb_spline(   data,   arg = NULL,   domain = NULL,   penalized = TRUE,   global = FALSE,   resolution = NULL,   ... )  # S3 method for tfd tfb_spline(   data,   arg = NULL,   domain = NULL,   penalized = TRUE,   global = FALSE,   resolution = NULL,   ... )  # S3 method for tfb tfb_spline(   data,   arg = NULL,   domain = NULL,   penalized = TRUE,   global = FALSE,   resolution = NULL,   ... )  # S3 method for default tfb_spline(   data,   arg = NULL,   domain = NULL,   penalized = TRUE,   global = FALSE,   resolution = NULL,   ... )"},{"path":"https://tidyfun.github.io/tf/reference/tfb_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spline-based representation of functional data — tfb_spline","text":"data matrix, data.frame list suitable shape, another tf-object containing functional data. ... arguments calls mgcv::s() setting basis mgcv::magic() mgcv::gam.fit() (penalized TRUE). user-specified , uses k = 25 cubic regression spline basis functions (.e., bs = \"cr\") default, set appropriately user. id name number column defining data belong function. arg numeric, list numerics. evaluation grid. See Details interplay resolution. data.frame-method: name/number column defining evaluation grid. matrix method try guess suitable arg-values column names data arg supplied. methods fall back integer sequences (1:<length data>) default provided. value name number column containing function evaluations. domain range arg. penalized coefficients basis representation estimated via mgcv::magic() (default) ordinary least squares. global Defaults FALSE. TRUE penalized = TRUE, functions share smoothing parameter (see Details). resolution resolution evaluation grid. See details tfd().","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spline-based representation of functional data — tfb_spline","text":"tfb-object","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_spline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spline-based representation of functional data — tfb_spline","text":"basis used set via call mgcv::s() spline bases discussed mgcv::smooth.terms() available, principle. Depending value penalized- global-flags, coefficient vectors observation estimated via fitting GAM (separately observation, !global) via mgcv::magic() (least square error, default) mgcv::gam() (family argument supplied) unpenalized least squares / maximum likelihood. \"smoothed\" representation computed, amount smoothing performed reported terms \"percentage variability preserved\", variance (.e, explained deviance, general case) smoothed function values divided variance original values (null deviance, general case). Reporting can switched verbose = FALSE. ... arguments supplies arguments spline basis (via mgcv::s()) estimation (via mgcv::magic() mgcv::gam()), important: many basis functions k spline basis , default  type spline basis bs used, default cubic regression splines (\"cr\") - family-argument fitters data squared errors reasonable criterion representation accuracy (see mgcv::family.mgcv() available). sp-argument manually fixing amount smoothing (see mgcv::s()), (drastically) reduces computation time. global == TRUE, routine first takes subset curves (10\\ curves sampled deterministically, 100, least 5) smoothing parameters per curve estimated uses mean log smoothing parameter curves. can much faster optimizing smoothing parameter curve large datasets. sparse data, estimating common smoothing parameter directly curves might yield better results, implemented .","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_spline.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Spline-based representation of functional data — tfb_spline","text":"tfb_spline(data.frame): convert data frames tfb_spline(matrix): convert matrices tfb_spline(numeric): convert matrices tfb_spline(list): convert lists tfb_spline(tfd): convert tfd (raw functional data) tfb_spline(tfb): convert tfb: modify basis representation, smoothing. tfb_spline(default): convert tfb: default method, returning prototype data missing","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tfbrackets.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessing, evaluating, subsetting and subassigning tf vectors — tfbrackets","title":"Accessing, evaluating, subsetting and subassigning tf vectors — tfbrackets","text":"functions access, subset, replace evaluate tf objects. information creating tf objects converting /list, data.frame matrix, see tfd() tfb(). See Details.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfbrackets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessing, evaluating, subsetting and subassigning tf vectors — tfbrackets","text":"","code":"# S3 method for tf [(x, i, j, interpolate = TRUE, matrix = TRUE)  # S3 method for tf [(x, i) <- value"},{"path":"https://tidyfun.github.io/tf/reference/tfbrackets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessing, evaluating, subsetting and subassigning tf vectors — tfbrackets","text":"x tf index observations (integerish, character logical, usual R rules apply) j arg used evaluate functions. (list ) numeric vectors. interpreted column number argument value respective functional datum. interpolate functions evaluated (.e., inter-/extrapolated) values arg original data available? relevant raw data class tfd, defaults TRUE. Basis-represented tfb always \"interpolated\". matrix result returned matrix list data.frames? TRUE, j (list ) single vector arg. See return value. value tf object subassignment. (currently) strictly typed, .e. objects sub-class identical domains atttributes can subassigned.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfbrackets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessing, evaluating, subsetting and subassigning tf vectors — tfbrackets","text":"j missing, subset functions x given . j given matrix == TRUE, numeric matrix function evaluations row represents one function column represents one argval given argument j, attribute arg=j row- column-names derived x[] j. j given matrix == FALSE, list tbl_dfs columns arg = j value = evaluations j observation .","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfbrackets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessing, evaluating, subsetting and subassigning tf vectors — tfbrackets","text":"Note break certain (terrible) R conventions vector-like objects: argument recycling, indexing NA, indexing names present x, indexing integers > length(x) trigger errors. Sub-assigning new elements positions beyond original vector length still works fill missing elements NAs. package developed fickle, irridescently rainbow-colored unicorns.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfbrackets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessing, evaluating, subsetting and subassigning tf vectors — tfbrackets","text":"","code":"x <- 1:3 * tfd(data = 0:10, arg = 0:10) plot(x)  # this operator's 2nd argument is quite overloaded -- you can: # 1. simply extract elements from the vector if no second arg is given: x[1] #> tfd[1] on (0,10) based on 11 evaluations each #> interpolation by tf_approx_linear  #> [1]: (0,0);(1,1);(2,2); ... x[c(TRUE, FALSE, FALSE)] #> tfd[1] on (0,10) based on 11 evaluations each #> interpolation by tf_approx_linear  #> [1]: (0,0);(1,1);(2,2); ... x[-(2:3)] #> tfd[1] on (0,10) based on 11 evaluations each #> interpolation by tf_approx_linear  #> [1]: (0,0);(1,1);(2,2); ... # 2. use the second argument and optional additional arguments to #    extract specific function evaluations in a number of formats: x[1:2, c(4.5, 9)] # returns a matrix of function evaluations #>      4.5  9 #> [1,] 4.5  9 #> [2,] 9.0 18 #> attr(,\"arg\") #> [1] 4.5 9.0 x[1:2, c(4.5, 9), interpolate = FALSE] # NA for arg-values not in the original data #> Warning: interpolate = FALSE & no evaluations for some <j>: NAs created. #>      4.5  9 #> [1,]  NA  9 #> [2,]  NA 18 #> attr(,\"arg\") #> [1] 4.5 9.0 x[-3, seq(1, 9, by = 2), matrix = FALSE] # list of data.frames for each function #> [[1]] #>   arg value #> 1   1     1 #> 2   3     3 #> 3   5     5 #> 4   7     7 #> 5   9     9 #>  #> [[2]] #>   arg value #> 1   1     2 #> 2   3     6 #> 3   5    10 #> 4   7    14 #> 5   9    18 #>  # in order to evaluate a set of observed functions on a new grid and # save them as a functional data vector again, use `tfd` or `tfb` instead: tfd(x, arg = seq(0, 10, by = 0.01), resolution = 1e-3) #> tfd[3] on (0,10) based on 1001 evaluations each #> interpolation by tf_approx_linear  #> [1]: (0.00,0);(0.01,0);(0.02,0); ... #> [2]: (0.00,0);(0.01,0);(0.02,0); ... #> [3]: (0.00,0);(0.01,0);(0.02,0); ..."},{"path":"https://tidyfun.github.io/tf/reference/tfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructors for vectors of ","title":"Constructors for vectors of ","text":"Various constructor methods tfd-objects. tfd.matrix accepts numeric matrix one function per row (!). arg provided, tries guess arg column names falls back 1:ncol(data) fails. tfd.data.frame uses first 3 columns data function information default: (id, arg, value) tfd.list accepts list vectors identical lengths containing evaluations list 2-column matrices/data.frames arg first evaluations second column tfd.default returns class prototype argument tfd() NULL recognised class","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructors for vectors of ","text":"","code":"tfd(data, ...)  # S3 method for matrix tfd(   data,   arg = NULL,   domain = NULL,   evaluator = tf_approx_linear,   resolution = NULL,   ... )  # S3 method for numeric tfd(   data,   arg = NULL,   domain = NULL,   evaluator = tf_approx_linear,   resolution = NULL,   ... )  # S3 method for data.frame tfd(   data,   id = 1,   arg = 2,   value = 3,   domain = NULL,   evaluator = tf_approx_linear,   resolution = NULL,   ... )  # S3 method for list tfd(   data,   arg = NULL,   domain = NULL,   evaluator = tf_approx_linear,   resolution = NULL,   ... )  # S3 method for tf tfd(data, arg = NULL, domain = NULL, evaluator = NULL, resolution = NULL, ...)  # S3 method for default tfd(   data,   arg = NULL,   domain = NULL,   evaluator = tf_approx_linear,   resolution = NULL,   ... )  as.tfd(data, ...)  as.tfd_irreg(data, ...)"},{"path":"https://tidyfun.github.io/tf/reference/tfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructors for vectors of ","text":"data matrix, data.frame list suitable shape, another tf-object. argument NULL (.e. calling tfd()) returns prototype class tfd ... used tfd, except tfd.tf -- specify arg ìnterpolate = TRUE turn irregular tfd regular one, see examples. arg numeric, list numerics. evaluation grid. See Details interplay resolution. data.frame-method: name/number column defining evaluation grid. matrix method try guess suitable arg-values column names data arg supplied. methods fall back integer sequences (1:<length data>) default provided. domain range arg. evaluator function accepting arguments x, arg, evaluations. See details tfd(). resolution resolution evaluation grid. See details tfd(). id name number column defining data belong function. value name number column containing function evaluations.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructors for vectors of ","text":"tfd-object (data.frame/matrix conversion functions, obviously.)","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructors for vectors of ","text":"evaluator: must (quoted bare) name function signature function(x, arg, evaluations) returns functions' (approximated/interpolated) values locations x based function evaluations available locations arg. Available evaluator-functions: tf_approx_linear linear interpolation without extrapolation (.e., zoo::na.approx() na.rm = FALSE)  -- default, tf_approx_spline cubic spline interpolation, (.e., zoo::na.spline() na.rm = FALSE), tf_approx_fill_extend linear interpolation constant extrapolation (.e., zoo::na.fill() fill = \"extend\") tf_approx_locf \"last observation carried forward\"  (.e., zoo::na.locf() na.rm = FALSE tf_approx_nocb \"next observation carried backward\" (.e., zoo::na.locf() na.rm = FALSE, fromLast = TRUE). See tf:::zoo_wrapper tf:::tf_approx_linear, simply zoo_wrapper(zoo::na.tf_approx, na.rm = FALSE), examples implementations . resolution: arg-values equivalent difference treated identical. E.g., evaluation \\(f(t)\\) available \\(t=1\\) function value requested \\(t = 1.01\\), \\(f(1)\\) returned resolution < 0.01. default, resolution set integer-valued power 10 one smaller smallest difference adjacent arg-values rounded integer-valued power 10: e.g., smallest difference consecutive arg-values 0.1 0.9999, resolution 0.01, etc. code: resolution = 10^(floor(log10(min(diff(<arg>))) - 1)","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructors for vectors of ","text":"","code":"# turn irregular to regular tfd by evaluating on a common grid:  f <- c(   tf_rgp(1, arg = seq(0, 1, length.out = 11)),   tf_rgp(1, arg = seq(0, 1, length.out = 21)) ) #> Warning: concatenating functions on different grids. #> Warning: inputs have different resolutions, result has resolution =0.01 tfd(f, arg = seq(0, 1, length.out = 21)) #> New names: #> • `1` -> `1...1` #> • `1` -> `1...2` #> tfd[2] on (0,1) based on 21 evaluations each #> interpolation by tf_approx_linear  #> 1...1: (0.00, 0.342);(0.05, 0.214);(0.10, 0.086); ... #> 1...2: (0.00,-0.104);(0.05,-0.156);(0.10,-0.075); ...  set.seed(1213) f <- tf_rgp(3, arg = seq(0, 1, length.out = 51)) |> tf_sparsify(0.9) # does not yield regular data because linear extrapolation yields NAs #   outside observed range: tfd(f, arg = seq(0, 1, length.out = 101)) #> Warning: 86 evaluations were NA, returning irregular tfd. #> tfd[3] on (0,1) based on 59 to 87 (mean: 72) evaluations each #> inter-/extrapolation by tf_approx_linear  #> 1: (0.20, 0.50);(0.21, 0.48);(0.22, 0.46); ... #> 2: (0.12,-0.34);(0.13,-0.30);(0.14,-0.26); ... #> 3: (0.04,-0.43);(0.05,-0.43);(0.06,-0.42); ... # this \"works\" (but may not yield sensible values..!!) for #   e.g. constant extrapolation: tfd(f, evaluator = tf_approx_fill_extend, arg = seq(0, 1, length.out = 101)) #> tfd[3] on (0,1) based on 101 evaluations each #> interpolation by tf_approx_fill_extend  #> 1: (0.00,  0.5);(0.01,  0.5);(0.02,  0.5); ... #> 2: (0.00,-0.34);(0.01,-0.34);(0.02,-0.34); ... #> 3: (0.00,-0.43);(0.01,-0.43);(0.02,-0.43); ... plot(f, col = 2) tfd(f,   arg = seq(0, 1, length.out = 151), evaluator = tf_approx_fill_extend ) |> lines()"},{"path":"https://tidyfun.github.io/tf/reference/tfdisplay.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty printing and formatting for functional data — print.tf","title":"Pretty printing and formatting for functional data — print.tf","text":"Print/format tf-objects.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfdisplay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty printing and formatting for functional data — print.tf","text":"","code":"# S3 method for tf print(x, n = 5, ...)  # S3 method for tfd_reg print(x, n = 5, ...)  # S3 method for tfd_irreg print(x, n = 5, ...)  # S3 method for tfb print(x, n = 5, ...)  # S3 method for tf format(   x,   digits = 2,   nsmall = 0,   width = options()$width,   n = 5,   prefix = TRUE,   ... )"},{"path":"https://tidyfun.github.io/tf/reference/tfdisplay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty printing and formatting for functional data — print.tf","text":"x R object (conceptually); typically numeric. n many elements x print ... arguments passed methods. digits positive integer indicating many significant digits     used     numeric complex x.  default, NULL, uses     getOption(\"digits\").  suggestion: enough decimal     places used smallest (magnitude) number     many significant digits, also satisfy nsmall.     (, notably interpretation complex numbers see     signif.) nsmall minimum number digits right decimal     point formatting real/complex numbers non-scientific formats.     Allowed values 0 <= nsmall <= 20. width default method: minimum field width     NULL 0 restriction. AsIs method: maximum field width non-character     objects.  NULL corresponds default 12. prefix used internally.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfgroupgenerics.html","id":null,"dir":"Reference","previous_headings":"","what":"Math, Summary and Ops Methods for tf — Ops.tf","title":"Math, Summary and Ops Methods for tf — Ops.tf","text":"methods operators mostly work arg-value-wise tf objects, see ?groupGeneric implementation details.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfgroupgenerics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Math, Summary and Ops Methods for tf — Ops.tf","text":"","code":"# S3 method for tf Ops(e1, e2)  # S3 method for tfd ==(e1, e2)  # S3 method for tfd !=(e1, e2)  # S3 method for tfb ==(e1, e2)  # S3 method for tfb !=(e1, e2)  # S3 method for tfd Ops(e1, e2)  # S3 method for tfb Ops(e1, e2)  # S3 method for tfd Math(x, ...)  # S3 method for tfb Math(x, ...)  # S3 method for tfd cummax(...)  # S3 method for tfd cummin(...)  # S3 method for tfd cumsum(...)  # S3 method for tfd cumprod(...)  # S3 method for tfb cummax(...)  # S3 method for tfb cummin(...)  # S3 method for tfb cumsum(...)  # S3 method for tfb cumprod(...)  # S3 method for tf Summary(...)"},{"path":"https://tidyfun.github.io/tf/reference/tfgroupgenerics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Math, Summary and Ops Methods for tf — Ops.tf","text":"e1 tf numeric vector e2 tf numeric vector x tf ... tf-objects (used Math group generic)","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfgroupgenerics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Math, Summary and Ops Methods for tf — Ops.tf","text":"See examples . Equality checks functional objects even iffy usual computer math reliable. Note max min guaranteed maximal/minimal entire domain, evaluation grid used computation. exception addition multiplication, operations tfb-objects first evaluate data arg, perform computations evaluations convert back tfb- object, loss precision expected -- especially small spline bases /wiggly data.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfgroupgenerics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Math, Summary and Ops Methods for tf — Ops.tf","text":"","code":"set.seed(1859) f <- tf_rgp(4) 2 * f == f + f #>    1    2    3    4  #> TRUE TRUE TRUE TRUE  sum(f) == f[1] + f[2] + f[3] + f[4] #> [1] TRUE log(exp(f)) == f #>    1    2    3    4  #> TRUE TRUE TRUE TRUE  plot(f, points = FALSE) lines(range(f), col = 2, lty = 2)   f2 <- tfb(tf_rgp(5), k = 50) #> Percentage of input data variability preserved in basis representation #> (per functional observation, approximate): #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   99.70   99.80   99.90   99.86   99.90  100.00  layout(t(1:2)) plot(f2, col = 1:5) plot(cumsum(f2), col = 1:5) #> Percentage of input data variability preserved in basis representation #> (per functional observation, approximate): #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>     100     100     100     100     100     100   # use ?tf_integrate for \"function-wise\" integrals i.e., weighted cumulative sums..."},{"path":"https://tidyfun.github.io/tf/reference/tfmethods.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions for tf-objects — tf_arg","title":"Utility functions for tf-objects — tf_arg","text":"bunch methods & utilities say: get set respective attributes tf-object.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfmethods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions for tf-objects — tf_arg","text":"","code":"tf_arg(f)  tf_evaluations(f)  tf_count(f)  tf_domain(f)  tf_domain(x) <- value  tf_evaluator(f)  tf_evaluator(x) <- value  tf_basis(f, as_tfd = FALSE)  tf_arg(x) <- value  # S3 method for tfd_irreg tf_arg(x) <- value  # S3 method for tfd_reg tf_arg(x) <- value  # S3 method for tfb tf_arg(x) <- value  tf_resolution(f)  tf_resolution(f) <- value  # S3 method for tfb coef(object, ...)  # S3 method for tf rev(x)  # S3 method for tf is.na(x)  # S3 method for tfd_irreg is.na(x)  is_tf(x)  is_tfd(x)  is_reg(x)  is_tfd_reg(x)  is_irreg(x)  is_tfd_irreg(x)  is_tfb(x)  is_tfb_spline(x)  is_tfb_fpc(x)"},{"path":"https://tidyfun.github.io/tf/reference/tfmethods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions for tf-objects — tf_arg","text":"f tf object x tf object value tf_evaluator<-: (bare quoted) name function can used interpolate tfd. Needs accept vector arguments x, arg, evaluations return evaluations function defined arg, evaluations x. tf_arg<-: (list ) new arg-values. tf_domain<-: sorted numeric vector 2 new endpoints domain. tf_resolution<-: (positive) number as_tfd basis returned tfd evaluated tf_arg(f)? Defaults FALSE. object usual ... dots","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tfsummaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions that summarize tf objects across argument values — tfsummaries","title":"Functions that summarize tf objects across argument values — tfsummaries","text":"return tf object containing respective functional statistic. summary returns tf-vector mean function, variance function, functional median, functional range (.e., pointwise min/max) central half functions, defined tf_depth()","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfsummaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions that summarize tf objects across argument values — tfsummaries","text":"","code":"# S3 method for tf mean(x, ...)  # S3 method for tf median(x, na.rm = FALSE, depth = c(\"MBD\", \"pointwise\"), ...)  sd(x, na.rm = FALSE)  # S3 method for default sd(x, na.rm = FALSE)  # S3 method for tf sd(x, na.rm = FALSE)  var(x, y = NULL, na.rm = FALSE, use)  # S3 method for default var(x, y = NULL, na.rm = FALSE, use)  # S3 method for tf var(x, y = NULL, na.rm = FALSE, use)  # S3 method for tf summary(object, ...)"},{"path":"https://tidyfun.github.io/tf/reference/tfsummaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions that summarize tf objects across argument values — tfsummaries","text":"x tf object ... optional additional arguments. na.rm logical.  missing values removed? depth method used determine central element x, .e., median. One functional data depths available via tf_depth() \"pointwise\" pointwise median function. y NULL (default) vector, matrix data frame     compatible dimensions x.   default equivalent     y = x (efficient). use optional character string giving     method computing covariances presence     missing values.  must (abbreviation ) one strings     \"everything\", \".obs\", \"complete.obs\",     \"na..complete\", \"pairwise.complete.obs\". object tfd object","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tfviz.html","id":null,"dir":"Reference","previous_headings":"","what":"base plots for tfs — plot.tf","title":"base plots for tfs — plot.tf","text":"base functions displaying functional data spaghetti- (.e., line plots) lasagna- (.e., heat map) flavors.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfviz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"base plots for tfs — plot.tf","text":"","code":"# S3 method for tf plot(   x,   y,   n_grid = 50,   points = is_irreg(x),   type = c(\"spaghetti\", \"lasagna\"),   alpha = min(1, max(0.05, 2/length(x))),   ... )  # S3 method for tf lines(x, arg, n_grid = 50, alpha = min(1, max(0.05, 2/length(x))), ...)  # S3 method for tf points(   x,   arg,   n_grid = NA,   alpha = min(1, max(0.05, 2/length(x))),   interpolate = FALSE,   ... )"},{"path":"https://tidyfun.github.io/tf/reference/tfviz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"base plots for tfs — plot.tf","text":"x tf object y (optional) numeric vector used arg (.e., x-axis...!) n_grid minimal size equidistant grid used plotting, defaults 50. See details. points original evaluation points marked points? Defaults TRUE irregular tfd FALSE others type \"spaghetti\": line plots, \"lasagna\": heat maps. alpha alpha-value (seegrDevices::rgb()) noodle transparency. Defaults 2/(. observations). Lower transparent. ... additional arguments matplot() (\"spaghetti\") image() (\"lasagna\") arg evaluation grid (vector) interpolate functions evaluated (.e., inter-/extrapolated) arg original data available? relevant tfd, defaults FALSE","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfviz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"base plots for tfs — plot.tf","text":"plotted tf-object, invisibly.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfviz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"base plots for tfs — plot.tf","text":"second argument y given, evaluation points (arg) functions given union tf's arg equidistant grid domain n_grid points. want see original data tfd-objects without inter-/extrapolation, use n_grid < 1 n_grid = NA.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfviz.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"base plots for tfs — plot.tf","text":"Swihart, B. J., Caffo, B., James, B. D., Strand, M., Schwartz, B. S., & Punjabi, N. M. (2010). Lasagna plots: saucy alternative spaghetti plots. Epidemiology (Cambridge, Mass.), 21(5), 621-625.","code":""},{"path":"https://tidyfun.github.io/tf/reference/unique_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Make syntactically valid unique names — unique_id","title":"Make syntactically valid unique names — unique_id","text":"See .","code":""},{"path":"https://tidyfun.github.io/tf/reference/unique_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make syntactically valid unique names — unique_id","text":"","code":"unique_id(x)"},{"path":"https://tidyfun.github.io/tf/reference/unique_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make syntactically valid unique names — unique_id","text":"x input","code":""},{"path":"https://tidyfun.github.io/tf/reference/unique_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make syntactically valid unique names — unique_id","text":"x turned list.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"vctrs methods for tf objects — vec_cast.tfd_reg","title":"vctrs methods for tf objects — vec_cast.tfd_reg","text":"functions extensions allow tf vectors work vctrs.","code":""},{"path":"https://tidyfun.github.io/tf/reference/vctrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vctrs methods for tf objects — vec_cast.tfd_reg","text":"","code":"# S3 method for tfd_reg vec_cast(x, to, ...)  # S3 method for tfd_irreg vec_cast(x, to, ...)  # S3 method for tfd_reg vec_cast.tfd_reg(x, to, ...)  # S3 method for tfd_irreg vec_cast.tfd_reg(x, to, ...)  # S3 method for tfd_reg vec_cast.tfd_irreg(x, to, ...)  # S3 method for tfd_irreg vec_cast.tfd_irreg(x, to, ...)  # S3 method for tfd_reg vec_ptype2(x, y, ...)  # S3 method for tfd_reg vec_ptype2.tfd_reg(x, y, ...)  # S3 method for tfd_irreg vec_ptype2.tfd_reg(x, y, ...)  # S3 method for tfd_irreg vec_ptype2(x, y, ...)  # S3 method for tfd_reg vec_ptype2.tfd_irreg(x, y, ...)  # S3 method for tfd_irreg vec_ptype2.tfd_irreg(x, y, ...)  vec_ptype2_tfd_tfd(x, y, ...)  # S3 method for tfb_spline vec_cast(x, to, ...)  # S3 method for tfb_fpc vec_cast(x, to, ...)  # S3 method for tfb_spline vec_cast.tfb_spline(x, to, ...)  # S3 method for tfb_fpc vec_cast.tfb_spline(x, to, ...)  # S3 method for tfb_spline vec_cast.tfb_fpc(x, to, ...)  # S3 method for tfb_fpc vec_cast.tfb_fpc(x, to, ...)  # S3 method for tfb_spline vec_ptype2(x, y, ...)  # S3 method for tfb_spline vec_ptype2.tfb_spline(x, y, ...)  # S3 method for tfb_fpc vec_ptype2.tfb_spline(x, y, ...)  # S3 method for tfb_fpc vec_ptype2(x, y, ...)  # S3 method for tfb_spline vec_ptype2.tfb_fpc(x, y, ...)  # S3 method for tfb_fpc vec_ptype2.tfb_fpc(x, y, ...)  vec_ptype2_tfb_tfb(x, y, ...)"},{"path":"https://tidyfun.github.io/tf/reference/vctrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vctrs methods for tf objects — vec_cast.tfd_reg","text":"x Vectors cast. Type cast . NULL, x returned . ... vec_cast_common(), vectors cast. vec_cast(), vec_cast_default(), vec_restore(), dots future extensions empty. y Vectors cast.","code":""}]
