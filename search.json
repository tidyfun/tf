[{"path":"https://tidyfun.github.io/tf/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"contributing repository, please make PR dev branch verifying package still passes R CMD CHECK. tf aims provide tidyfun’s core functionality dependencies possible, please bear mind importing additional packages.","code":""},{"path":"https://tidyfun.github.io/tf/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"thou wilt, don’t dick.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://tidyfun.github.io/tf/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://tidyfun.github.io/tf/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabian Scheipl. Author, maintainer. Jeff Goldsmith. Author. Julia Wrobel. Contributor. Maximilian Muecke. Contributor. Sebastian Fischer. Contributor. Trevor Hastie. Contributor.            softImpute author Rahul Mazumder. Contributor.            softImpute author Chen Meng. Contributor.            mogsa author","code":""},{"path":"https://tidyfun.github.io/tf/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Scheipl F, Goldsmith J (2024). tf: S3 Classes Methods Tidy Functional Data. R package version 0.3.2, https://github.com/tidyfun/tf/, https://tidyfun.github.io/tf/.","code":"@Manual{,   title = {tf: S3 Classes and Methods for Tidy Functional Data},   author = {Fabian Scheipl and Jeff Goldsmith},   year = {2024},   note = {R package version 0.3.2, https://github.com/tidyfun/tf/},   url = {https://tidyfun.github.io/tf/}, }"},{"path":"https://tidyfun.github.io/tf/index.html","id":"tf-","dir":"","previous_headings":"","what":"S3 Classes and Methods for Tidy Functional Data","title":"S3 Classes and Methods for Tidy Functional Data","text":"tf package provides necessary infrastructure tidyfun minimal dependencies – specifically: tidyverse-dependencies. goal tidyfun, turn, provide accessible well-documented software makes functional data analysis R easy – specifically data wrangling exploratory analysis. tf includes definitions new S3 data types vectors functional data associated methods. tf-vectors, subclasses tfd tfb, use vctrs-framework, can operated using standard functions (+, mean(), c(), etc.) well several new functions tf implement operations specific functional data (tf_smooth, tf_derive, tf_integrate). Crucially, vectors class tf can included data frames containing variables, simple reliable data manipulation. approach connected conceptual framework functional data analysis assumes complete functions unit observation. tidyfun tf, can keep full curves alongside numeric, factor, observations subject one data frame.","code":""},{"path":"https://tidyfun.github.io/tf/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"S3 Classes and Methods for Tidy Functional Data","text":"can install latest release GitHub :","code":"pak::pak(\"tidyfun/tf\")"},{"path":"https://tidyfun.github.io/tf/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"S3 Classes and Methods for Tidy Functional Data","text":"tf provides: new data types representing functional data: tfd & tfb arithmetic operators descriptive statistics data basic graphics functions tf vectors basic data wrangling functional data: reshaping list columns wide long back, interpolating different grids, filtering zooming, etc. Please see tidyfun website full documentation including vignettes etc.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/index.html","id":"new-vector-like-data-types-for-functional-data","dir":"","previous_headings":"What does it do?","what":"New vector-like data types for functional data","title":"S3 Classes and Methods for Tidy Functional Data","text":"tf provides new S3-classes functional data, either raw data (class tfd tidy functional data) basis representation (class tfb tidy functional basis data). tf-objects can subsetted subassigned, computed summarized. Almost operators like ==, + * math functions like sum, log abs statistics functions like mean sd defined tf’s data structures (). tf objects just glorified lists, work well columns data frames. makes lot easier keep data functional measurements together one object preprocessing, exploratory analysis description. time, objects actually behave like vectors functions extent, .e., can evaluated point domain, can integrated differentiated, etc. See information operations defined tf vectors.","code":""},{"path":"https://tidyfun.github.io/tf/index.html","id":"methods-for-converting-existing-data-to-tf-and-back","dir":"","previous_headings":"What does it do?","what":"Methods for converting existing data to tf and back","title":"S3 Classes and Methods for Tidy Functional Data","text":"tf includes functions tfd tfb converting matrices, data frames, etc. tf vectors back. data wrangling methods tidyverse-inspired way ggplot2-geoms functional data available tidyfun. See details getting data () tf format. Found bug? Got question? Missing functionality? Please let us know can make better.","code":""},{"path":"https://tidyfun.github.io/tf/reference/converters.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert functional data back to tabular data formats — as.data.frame.tf","title":"Convert functional data back to tabular data formats — as.data.frame.tf","text":"Various converters turn tfb- tfd-vectors data.frames matrices, even actual R function.","code":""},{"path":"https://tidyfun.github.io/tf/reference/converters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert functional data back to tabular data formats — as.data.frame.tf","text":"","code":"# S3 method for tf as.data.frame(x, row.names = NULL, optional = FALSE, unnest = FALSE, ...)  # S3 method for tf as.matrix(x, arg, interpolate = FALSE, ...)  # S3 method for tf as.function(x, ...)"},{"path":"https://tidyfun.github.io/tf/reference/converters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert functional data back to tabular data formats — as.data.frame.tf","text":"x tf object row.names NULL character vector giving row     names data frame.  Missing values allowed. optional used unnest TRUE, function return data.frame evaluated functions. ... additional arguments passed methods. arg vector argument values / evaluation points x. Defaults tf_arg(x). interpolate functions evaluated (.e., inter-/extrapolated) values arg original data available? relevant raw data class tfd, defaults FALSE. Basis-represented functional data tfb always \"interpolated\".","code":""},{"path":"https://tidyfun.github.io/tf/reference/converters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert functional data back to tabular data formats — as.data.frame.tf","text":".data.frame.tf: unnest FALSE (default), one-column data.frame tf-column containing x. unnest TRUE, 3-column data frame columns id (unique) names x numeric identifier, arg value, row containing one function evaluation original arg-values. .matrix.tf: matrix one row per function one column per arg. .function.tf: R function argument arg evaluates x arg returns list function values","code":""},{"path":"https://tidyfun.github.io/tf/reference/ensure_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Turns any object into a list — ensure_list","title":"Turns any object into a list — ensure_list","text":"See .","code":""},{"path":"https://tidyfun.github.io/tf/reference/ensure_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turns any object into a list — ensure_list","text":"","code":"ensure_list(x)"},{"path":"https://tidyfun.github.io/tf/reference/ensure_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turns any object into a list — ensure_list","text":"x input","code":""},{"path":"https://tidyfun.github.io/tf/reference/ensure_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turns any object into a list — ensure_list","text":"x turned list.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/fpc_wsvd.html","id":null,"dir":"Reference","previous_headings":"","what":"Eigenfunctions via weighted, regularized SVD — fpc_wsvd","title":"Eigenfunctions via weighted, regularized SVD — fpc_wsvd","text":"Compute (truncated) orthonormal eigenfunctions scores (partially missing) data common (potentially non-equidistant) grid.","code":""},{"path":"https://tidyfun.github.io/tf/reference/fpc_wsvd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eigenfunctions via weighted, regularized SVD — fpc_wsvd","text":"","code":"fpc_wsvd(data, arg, pve = 0.995)  # S3 method for matrix fpc_wsvd(data, arg, pve = 0.995)  # S3 method for data.frame fpc_wsvd(data, arg, pve = 0.995)"},{"path":"https://tidyfun.github.io/tf/reference/fpc_wsvd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eigenfunctions via weighted, regularized SVD — fpc_wsvd","text":"data numeric matrix function evaluations (row one curve, NAs) arg numeric vector argument values pve percentage variance explained","code":""},{"path":"https://tidyfun.github.io/tf/reference/fpc_wsvd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eigenfunctions via weighted, regularized SVD — fpc_wsvd","text":"list entries mu estimated mean function (numeric vector) efunctions estimated FPCs (numeric matrix, columns represent FPCs) scores estimated FPC scores (one row per observed curve) npc many FPCs returned given pve (integer) scoring_function function returns FPC scores new data given eigenfunctions, see tf:::.fpc_wsvd_scores example.","code":""},{"path":"https://tidyfun.github.io/tf/reference/fpc_wsvd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Eigenfunctions via weighted, regularized SVD — fpc_wsvd","text":"Performs weighted SVD trapezoidal quadrature weights s.t. returned vectors represent (evaluations ) orthonormal eigenfunctions \\(\\phi_j(t)\\), eigenvectors \\(\\phi_j = (\\phi_j(t_1), \\dots, \\phi_j(t_n))\\), specifically: \\(\\int_T \\phi_j(t)^2 dt \\approx \\sum_i \\Delta_i \\phi_j(t_i)^2 = 1\\) given quadrature weights \\(\\Delta_i\\), \\(\\phi_j'\\phi_j = \\sum_i \\phi_j(t_i)^2 = 1\\); \\(\\int_T \\phi_j(t) \\phi_k(t) dt = 0\\) \\(\\phi_j'\\phi_k = \\sum_i \\phi_j(t_i)\\phi_k(t_i) = 0\\), c.f. mogsa::wsvd(). incomplete data, uses adaptation softImpute::softImpute(), see references. Note work well data common grid percent data points missing, breaks completely truly irregular data /common timepoints, even observed densely. data, either re-evaluate common grid first use advanced FPCA approaches like refund::fpca_sc(), see last example tfb_fpc()","code":""},{"path":"https://tidyfun.github.io/tf/reference/fpc_wsvd.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Eigenfunctions via weighted, regularized SVD — fpc_wsvd","text":"code adapted / inspired mogsa::wsvd() Cheng Meng softImpute::softImpute() Trevor Hastie Rahul Mazumder. Meng C (2023). mogsa: Multiple omics data integrative clustering gene set analysis. https://bioconductor.org/packages/mogsa. Mazumder, Rahul, Hastie, Trevor, Tibshirani, Robert (2010). “Spectral regularization algorithms learning large incomplete matrices.” Journal Machine Learning Research, 11, 2287-2322. Hastie T, Mazumder R (2021). softImpute: Matrix Completion via Iterative Soft-Thresholded SVD. R package version 1.4-1, https://CRAN.R-project.org/package=softImpute.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/fpc_wsvd.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Eigenfunctions via weighted, regularized SVD — fpc_wsvd","text":"Trevor Hastie, Rahul Mazumder, Cheng Meng, Fabian Scheipl","code":""},{"path":"https://tidyfun.github.io/tf/reference/functionwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize each tf in a vector — functionwise","title":"Summarize each tf in a vector — functionwise","text":"functions extract (user-specified) function-wise summary statistics entry  tf-vector. summarize vector functions argument value, see ?tfsummaries. Note tend yield lots NAs irregular tfd unless set tf_evaluator()-function inter- extrapolation beforehand.","code":""},{"path":"https://tidyfun.github.io/tf/reference/functionwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize each tf in a vector — functionwise","text":"","code":"tf_fwise(x, .f, arg = tf_arg(x), ...)  tf_fmax(x, arg = tf_arg(x), na.rm = FALSE)  tf_fmin(x, arg = tf_arg(x), na.rm = FALSE)  tf_fmedian(x, arg = tf_arg(x), na.rm = FALSE)  tf_frange(x, arg = tf_arg(x), na.rm = FALSE, finite = FALSE)  tf_fmean(x, arg = tf_arg(x))  tf_fvar(x, arg = tf_arg(x))  tf_fsd(x, arg = tf_arg(x))  tf_crosscov(x, y, arg = tf_arg(x))  tf_crosscor(x, y, arg = tf_arg(x))"},{"path":"https://tidyfun.github.io/tf/reference/functionwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize each tf in a vector — functionwise","text":"x tf object .f function formula applied entry x, see purrr::as_mapper() Details. arg defaults standard argument values x ... additional arguments purrr::as_mapper() na.rm logical indicating whether missing values     removed. finite logical, indicating non-finite elements     omitted. y tf object","code":""},{"path":"https://tidyfun.github.io/tf/reference/functionwise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize each tf in a vector — functionwise","text":"list (vector) length x respective summaries","code":""},{"path":"https://tidyfun.github.io/tf/reference/functionwise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize each tf in a vector — functionwise","text":"tf_fwise turns x list data.frames columns arg values internally, function/formula .f gets data.frame .x columns, see examples source code tf_fmin(), tf_fmax(), etc","code":""},{"path":"https://tidyfun.github.io/tf/reference/functionwise.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Summarize each tf in a vector — functionwise","text":"tf_fwise(): User-specified function-wise summary statistics tf_fmax(): maximal value function tf_fmin(): minimal value function tf_fmedian(): median value function tf_frange(): range values function tf_fmean(): mean function: \\(\\tfrac{1}{|T|}\\int_T x_i(t) dt\\) tf_fvar(): variance function: \\(\\tfrac{1}{|T|}\\int_T (x_i(t) - \\bar x(t))^2 dt\\) tf_fsd(): standard deviation function: \\(\\sqrt{\\tfrac{1}{|T|}\\int_T (x_i(t) - \\bar x(t))^2 dt}\\) tf_crosscov(): cross-covariances two functional vectors: \\(\\tfrac{1}{|T|}\\int_T (x_i(t) - \\bar x(t)) (y_i(t)-\\bar y(t)) dt\\) tf_crosscor(): cross-correlation two functional vectors: tf_crosscov(x, y) / (tf_fsd(x) * tf_fsd(y))","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/functionwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize each tf in a vector — functionwise","text":"","code":"x <- tf_rgp(3) layout(t(1:3)) plot(x, col = 1:3) #  each function's values to [0,1]: x_clamp <- (x - tf_fmin(x)) / (tf_fmax(x) - tf_fmin(x)) plot(x_clamp, col = 1:3) # standardize each function to have mean / integral 0 and sd 1: x_std <- (x - tf_fmean(x)) / tf_fsd(x) tf_fvar(x_std) == c(1, 1, 1) #>     1     2     3  #>  TRUE FALSE  TRUE  plot(x_std, col = 1:3)  # Custom functions: # 80%tiles of each function's values: tf_fwise(x, ~ quantile(.x$value, .8)) |> unlist() #>     1.80%     2.80%     3.80%  #> 0.3911169 1.5431315 0.8560247  # minimal value of each function for t >.5 tf_fwise(x, ~ min(.x$value[.x$arg > .5])) |> unlist() #>          1          2          3  #> -0.2591620  0.7030887  0.1492651   tf_crosscor(x, -x) #>  1  2  3  #> -1 -1 -1  tf_crosscov(x, x) == tf_fvar(x) #>    1    2    3  #> TRUE TRUE TRUE"},{"path":"https://tidyfun.github.io/tf/reference/in_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Find out if values are inside given bounds — in_range","title":"Find out if values are inside given bounds — in_range","text":"in_range infix-equivalent %inr% return TRUE values numeric vector f within range values r.","code":""},{"path":"https://tidyfun.github.io/tf/reference/in_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find out if values are inside given bounds — in_range","text":"","code":"in_range(f, r)  f %inr% r"},{"path":"https://tidyfun.github.io/tf/reference/in_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find out if values are inside given bounds — in_range","text":"f numeric vector r numeric vector used specify range, minimum maximum r used.","code":""},{"path":"https://tidyfun.github.io/tf/reference/in_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find out if values are inside given bounds — in_range","text":"logical vector length f","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/prep_plotting_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess evaluation grid for plotting — prep_plotting_arg","title":"Preprocess evaluation grid for plotting — prep_plotting_arg","text":"(internal function exported re-use upstream packages)","code":""},{"path":"https://tidyfun.github.io/tf/reference/prep_plotting_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess evaluation grid for plotting — prep_plotting_arg","text":"","code":"prep_plotting_arg(f, n_grid)"},{"path":"https://tidyfun.github.io/tf/reference/prep_plotting_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess evaluation grid for plotting — prep_plotting_arg","text":"f tf-object n_grid length evaluation grid","code":""},{"path":"https://tidyfun.github.io/tf/reference/prep_plotting_arg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess evaluation grid for plotting — prep_plotting_arg","text":"semi-regular grid rounded appropriate resolution","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tf: S3 Classes and Methods for Tidy Functional Data — tf-package","title":"tf: S3 Classes and Methods for Tidy Functional Data — tf-package","text":"tf light-weight package dependencies provides class definitions methods infrastructure tidyfun -- tf gives : new S3 data types representing (vectors ) functional data: tfd() & tfb() arithmetic operators data (Ops.tf()), simple descriptive statistics: e.g. mean.tf(), median.tf() base graphics functions data: plot.tf() functions smoothing (tf_smooth.tfd()), differentiation tf_derive.tfd()) integration (tf_derive.tfd()) goal add-package tidyfun make data wrangling exploratory analysis functional data R quick easy, using tidyverse syntax standards.  Please also install tidyfun full functionality access full documentation including number vignettes case studies, visit tidyfun website.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tf: S3 Classes and Methods for Tidy Functional Data — tf-package","text":"Maintainer: Fabian Scheipl fabian.scheipl@googlemail.com (ORCID) Authors: Jeff Goldsmith contributors: Julia Wrobel (ORCID) [contributor] Maximilian Muecke (ORCID) [contributor] Sebastian Fischer (ORCID) [contributor] Trevor Hastie (softImpute author) [contributor] Rahul Mazumder (softImpute author) [contributor] Chen Meng (mogsa author) [contributor]","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_approx.html","id":null,"dir":"Reference","previous_headings":"","what":"Inter- and extrapolation functions for tfd-objects — tf_approx_linear","title":"Inter- and extrapolation functions for tfd-objects — tf_approx_linear","text":"currently available evaluator-functions tfd-objects, control entries inter-/extrapolated previously unseen arg-values. merely wrappers around zoo::na.fill(), zoo::na.approx(), etc... Note meant called directly -- internal functions used tf_evaluate.tfd() thing. list: tf_approx_linear linear interpolation without extrapolation (.e., zoo::na.approx() na.rm = FALSE)  -- default, tf_approx_spline cubic spline interpolation, (.e., zoo::na.spline() na.rm = FALSE), tf_approx_none order inter-/extrapolate ever (.e., zoo::na.fill() fill = NA) tf_approx_fill_extend linear interpolation constant extrapolation (.e., zoo::na.fill() fill = \"extend\") tf_approx_locf \"last observation carried forward\"  (.e., zoo::na.locf() na.rm = FALSE tf_approx_nocb \"next observation carried backward\" (.e., zoo::na.locf() na.rm = FALSE, fromLast = TRUE). implementing , see source code tf:::zoo_wrapper.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_approx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inter- and extrapolation functions for tfd-objects — tf_approx_linear","text":"","code":"tf_approx_linear(x, arg, evaluations)  tf_approx_spline(x, arg, evaluations)  tf_approx_none(x, arg, evaluations)  tf_approx_fill_extend(x, arg, evaluations)  tf_approx_locf(x, arg, evaluations)  tf_approx_nocb(x, arg, evaluations)"},{"path":"https://tidyfun.github.io/tf/reference/tf_approx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inter- and extrapolation functions for tfd-objects — tf_approx_linear","text":"x new arg values approximate/interpolate/extrapolate function arg arg values evaluations evaluations function values arg","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_approx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inter- and extrapolation functions for tfd-objects — tf_approx_linear","text":"vector values function defined given \\((x_i, f(x_i))\\)=(arg, evaluations)-tuples new argument values x.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional Data Depth — tf_depth","title":"Functional Data Depth — tf_depth","text":"Data depths functional data. Currently implemented: Modified Band-2 Depth, see reference.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional Data Depth — tf_depth","text":"","code":"tf_depth(x, arg, depth = \"MBD\", na.rm = TRUE, ...)  # S3 method for matrix tf_depth(x, arg, depth = \"MBD\", na.rm = TRUE, ...)  # S3 method for tf tf_depth(x, arg, depth = \"MBD\", na.rm = TRUE, ...)"},{"path":"https://tidyfun.github.io/tf/reference/tf_depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional Data Depth — tf_depth","text":"x tf (matrix evaluations) arg grid evaluation points depth currently available: \"MBD\", .e. modified band depth na.rm TRUE remove missing observations? ... arguments handed function computing respective tf_depth.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional Data Depth — tf_depth","text":"vector tf_depth values","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_depth.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Functional Data Depth — tf_depth","text":"Sun, Ying, Genton, G M, Nychka, W D (2012). “Exact fast computation band depth large functional datasets: quickly can one million curves ranked?” Stat, 1(1), 68--74. López-Pintado, Sara, Romo, Juan (2009). “concept depth functional data.” Journal American statistical Association, 104(486), 718--734.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_derive.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiating functional data: approximating derivative functions — tf_derive","title":"Differentiating functional data: approximating derivative functions — tf_derive","text":"Derivatives tf-objects use finite differences evaluations tfd finite differences basis functions tfb.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_derive.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiating functional data: approximating derivative functions — tf_derive","text":"","code":"tf_derive(f, arg, order = 1, ...)  # S3 method for matrix tf_derive(f, arg, order = 1, ...)  # S3 method for tfd tf_derive(f, arg, order = 1, ...)  # S3 method for tfb_spline tf_derive(f, arg, order = 1, ...)  # S3 method for tfb_fpc tf_derive(f, arg, order = 1, ...)"},{"path":"https://tidyfun.github.io/tf/reference/tf_derive.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differentiating functional data: approximating derivative functions — tf_derive","text":"f tf-object arg grid use finite differences. arg returned object tfd-inputs, see Details. order order differentiation. Maximal value tfb_spline 2. ... used","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_derive.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differentiating functional data: approximating derivative functions — tf_derive","text":"tf (slightly different arg basis derivatives, see Details)","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_derive.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiating functional data: approximating derivative functions — tf_derive","text":"derivatives tfd objects use centered finite differences, e.g. first derivatives \\(f'((t_i + t_{+1})/2) \\approx \\frac{f(t_i) + f(t_{+1})}{t_{+1} - t_i}\\), domains differentiated tfd shrink (slightly) ends. Unless tfd rather fine regular grid, representing data suitable basis representation tfb() computing derivatives integrals usually preferable. Note , spline bases like \"cr\" \"tp\" always begin/end linearly, computing second derivatives produce artefacts outer limits functions' domain due boundary constraints. Basis \"bs\" problem sufficiently high orders, tends yield slightly less stable fits.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_derive.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Differentiating functional data: approximating derivative functions — tf_derive","text":"tf_derive(matrix): row-wise finite differences tf_derive(tfd): derivatives finite differencing. tf_derive(tfb_spline): derivatives finite differencing. tf_derive(tfb_fpc): derivatives finite differencing.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_evaluate.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate tf-vectors for given argument values — tf_evaluate","title":"Evaluate tf-vectors for given argument values — tf_evaluate","text":"Also used internally [-operator tf data (see ?tfbrackets) evaluate object, see examples.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_evaluate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate tf-vectors for given argument values — tf_evaluate","text":"","code":"tf_evaluate(object, arg, ...)  # S3 method for default tf_evaluate(object, arg, ...)  # S3 method for tfd tf_evaluate(object, arg, evaluator = tf_evaluator(object), ...)  # S3 method for tfb tf_evaluate(object, arg, ...)"},{"path":"https://tidyfun.github.io/tf/reference/tf_evaluate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate tf-vectors for given argument values — tf_evaluate","text":"object tf, data.frame-like object tf columns. arg optional evaluation grid (vector list vectors). Defaults tf_arg(object), implicitly. ... used evaluator optional. function use inter/extrapolating tfd. Defaults tf_evaluator(object). See e.g. tf_approx_linear() details.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_evaluate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate tf-vectors for given argument values — tf_evaluate","text":"list numeric vectors containing function evaluations arg.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_evaluate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate tf-vectors for given argument values — tf_evaluate","text":"","code":"f <- tf_rgp(3, arg = seq(0, 1, length.out = 11)) tf_evaluate(f) |> str() #> List of 3 #>  $ 1: num [1:11] 0.264 0.717 0.802 0.655 0.5 ... #>  $ 2: num [1:11] -2.121 -1.908 -1.396 -0.729 -0.262 ... #>  $ 3: num [1:11] 0.291 -0.29 -0.444 -0.191 -0.105 ... tf_evaluate(f, arg = 0.5) |> str() #> List of 3 #>  $ 1: num 0.366 #>  $ 2: num -0.0252 #>  $ 3: num -0.61 # equivalent, as matrix: f[, 0.5] #>           0.5 #> 1  0.36585021 #> 2 -0.02516243 #> 3 -0.61012227 #> attr(,\"arg\") #> [1] 0.5 new_grid <- seq(0, 1, length.out = 6) tf_evaluate(f, arg = new_grid) |> str() #> List of 3 #>  $ 1: num [1:6] 0.264 0.802 0.5 0.104 -0.144 ... #>  $ 2: num [1:6] -2.1205 -1.3965 -0.2621 0.0976 0.9949 ... #>  $ 3: num [1:6] 0.291 -0.444 -0.105 -0.962 0.55 ... # equivalent, as matrix: f[, new_grid] #>            0        0.2        0.4         0.6        0.8         1 #> 1  0.2641399  0.8016938  0.5003438  0.10448947 -0.1438695 0.1386855 #> 2 -2.1205464 -1.3964857 -0.2620896  0.09757397  0.9949393 1.3542389 #> 3  0.2909722 -0.4444448 -0.1050264 -0.96190135  0.5496152 2.1038015 #> attr(,\"arg\") #> [1] 0.0 0.2 0.4 0.6 0.8 1.0"},{"path":"https://tidyfun.github.io/tf/reference/tf_integrate.html","id":null,"dir":"Reference","previous_headings":"","what":"Integrals and anti-derivatives of functional data — tf_integrate","title":"Integrals and anti-derivatives of functional data — tf_integrate","text":"Integrals tf-objects computed simple quadrature (trapezoid rule). default scalar definite integral \\(\\int^{upper}_{lower}f(s)ds\\) returned (option definite = TRUE), alternatively definite = FALSE anti-derivative [lower, upper], e.g. tfd tfb object representing \\(F(t) \\approx \\int^{t}_{lower}f(s)ds\\), \\(t \\\\)[lower, upper], returned.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_integrate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Integrals and anti-derivatives of functional data — tf_integrate","text":"","code":"tf_integrate(f, arg, lower, upper, ...)  # S3 method for default tf_integrate(f, arg, lower, upper, ...)  # S3 method for tfd tf_integrate(   f,   arg,   lower = tf_domain(f)[1],   upper = tf_domain(f)[2],   definite = TRUE,   ... )  # S3 method for tfb tf_integrate(   f,   arg,   lower = tf_domain(f)[1],   upper = tf_domain(f)[2],   definite = TRUE,   ... )"},{"path":"https://tidyfun.github.io/tf/reference/tf_integrate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Integrals and anti-derivatives of functional data — tf_integrate","text":"f tf-object arg (optional) grid use quadrature. lower lower limits integration range. definite=TRUE, can vector length f. upper upper limits integration range (see definite arg / Description). definite=TRUE, can vector length f. ... used definite definite integral  returned (default) antiderivative. See Description.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_integrate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Integrals and anti-derivatives of functional data — tf_integrate","text":"definite = TRUE, definite integrals functions f. definite = FALSE tf-inputs, tf object containing anti-derivatives","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_interpolate.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-evaluate tf-objects on a new grid of argument values. — tf_interpolate","title":"Re-evaluate tf-objects on a new grid of argument values. — tf_interpolate","text":"Change internal representation tf-object uses different grid argument values (arg). Useful thinning dense grids make data smaller filling sparse grids make derivatives/integrals locating extrema zero crossings accurate (... interpolation works well ...) making irregular functional data () regular data. tfd-objects, just syntactic sugar tfd(object, arg = arg). inter/extrapolate reliably avoid NAs, call tf_interpolate evaluator = tf_approx_fill_extend. tfb-objects, re-evaluates basis functions new grid can speed subsequent computations use grid. NB: reliably impute irregular data regular, common grid, better FPCA-based imputation model-based approaches cases.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_interpolate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-evaluate tf-objects on a new grid of argument values. — tf_interpolate","text":"","code":"tf_interpolate(object, arg, ...)  # S3 method for tfb tf_interpolate(object, arg, ...)  # S3 method for tfd tf_interpolate(object, arg, ...)"},{"path":"https://tidyfun.github.io/tf/reference/tf_interpolate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-evaluate tf-objects on a new grid of argument values. — tf_interpolate","text":"object object inheriting tf arg vector argument values evaluate functions object ... additional arguments handed tfd tfb, construction returned object","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_interpolate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-evaluate tf-objects on a new grid of argument values. — tf_interpolate","text":"tfd tfb object new grid given arg","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_interpolate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-evaluate tf-objects on a new grid of argument values. — tf_interpolate","text":"","code":"# \\donttest{ # thinning out a densely observed tfd dense <- tf_rgp(10, arg = seq(0, 1, length.out = 1001)) less_dense <- tf_interpolate(dense, arg = seq(0, 1, length.out = 101)) dense #> tfd[10] on (0,1) based on 1001 evaluations each #> interpolation by tf_approx_linear  #> 1: (0.000, 0.98);(0.001, 1.04);(0.002, 1.00); ... #> 2: (0.000,-0.77);(0.001,-0.79);(0.002,-0.82); ... #> 3: (0.000, 0.24);(0.001, 0.23);(0.002, 0.23); ... #> 4: (0.000,-0.23);(0.001,-0.23);(0.002,-0.27); ... #> 5: (0.000, 0.16);(0.001, 0.14);(0.002, 0.15); ... #>     [....]   (5 not shown) less_dense #> tfd[10] on (0,1) based on 101 evaluations each #> interpolation by tf_approx_linear  #> 1: (0.00, 0.98);(0.01, 0.98);(0.02, 0.94); ... #> 2: (0.00,-0.77);(0.01,-0.71);(0.02,-0.68); ... #> 3: (0.00, 0.24);(0.01, 0.23);(0.02, 0.22); ... #> 4: (0.00,-0.23);(0.01,-0.27);(0.02,-0.33); ... #> 5: (0.00,0.157);(0.01,0.047);(0.02,0.022); ... #>     [....]   (5 not shown) # filling out sparse data (use a suitable evaluator-function!) sparse <- tf_rgp(10, arg = seq(0, 5, length.out = 11)) plot(sparse, points = TRUE) # change evaluator for better interpolation tfd(sparse, evaluator = tf_approx_spline) |>   tf_interpolate(arg = seq(0, 5, length.out = 201)) |>   lines(col = 2, lty = 2)   set.seed(1860) sparse_irregular <- tf_rgp(5) |>   tf_sparsify(0.5) |>   tf_jiggle() tf_interpolate(sparse_irregular, arg = seq(0, 1, length.out = 51)) #> Warning: 33 evaluations were NA, returning irregular tfd. #> irregular tfd[5] on (0,1) based on 39 to 48 (mean: 44) evaluations each #> interpolation by tf_approx_linear  #> 1: (0.14,  -1.4);(0.16,  -1.3);(0.18,  -1.3); ... #> 2: (0.02,   1.7);(0.04,   1.6);(0.06,   1.5); ... #> 3: (0.08,  0.93);(0.10,  1.03);(0.12,  1.11); ... #> 4: (0.04, -0.14);(0.06, -0.29);(0.08, -0.40); ... #> 5: (0.12, 0.049);(0.14,-0.035);(0.16,-0.098); ... # }"},{"path":"https://tidyfun.github.io/tf/reference/tf_jiggle.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a tf (more) irregular — tf_jiggle","title":"Make a tf (more) irregular — tf_jiggle","text":"Randomly create irregular functional data regular ones. jiggle randomly moving around arg-values. tfd. sparsify setting (100*dropout)% values NA.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_jiggle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a tf (more) irregular — tf_jiggle","text":"","code":"tf_jiggle(f, amount = 0.4, ...)  tf_sparsify(f, dropout = 0.5, ...)"},{"path":"https://tidyfun.github.io/tf/reference/tf_jiggle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a tf (more) irregular — tf_jiggle","text":"f tfd object amount far away original grid points can new grid points lie, (relative original distance neighboring grid points). Defaults 40% (0.4) original grid distances. Must lower 0.5 ... additional args returned tfd tf_jiggle dropout many values f drop, defaults 50%.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_jiggle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a tf (more) irregular — tf_jiggle","text":"(irregular) tfd object","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_rebase.html","id":null,"dir":"Reference","previous_headings":"","what":"Change (basis) representation of a tf-object — tf_rebase","title":"Change (basis) representation of a tf-object — tf_rebase","text":"Apply representation one tf-object another; .e. re-express 's basis, grid, etc. Useful making different functional data objects compatible can combined, compared computed .","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_rebase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change (basis) representation of a tf-object — tf_rebase","text":"","code":"tf_rebase(object, basis_from, arg = tf_arg(basis_from), ...)  # S3 method for tfd tf_rebase(object, basis_from, arg = tf_arg(basis_from), ...)  # S3 method for tfb tf_rebase(object, basis_from, arg = tf_arg(basis_from), ...)"},{"path":"https://tidyfun.github.io/tf/reference/tf_rebase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change (basis) representation of a tf-object — tf_rebase","text":"object tf object whose representation changed basis_from tf object desired basis, arg, evaluator, etc. arg optional new arg values, defaults basis_from ... forwarded tfb tfd constructors","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_rebase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change (basis) representation of a tf-object — tf_rebase","text":"tf-vector containing data object representation basis_from (potentially modified arguments given ...).","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_rebase.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Change (basis) representation of a tf-object — tf_rebase","text":"uses double dispatch (S3) internally, methods defined generics methods tf_rebase.tfd.tfd, tf_rebase.tfd.tfb_spline, tf_rebase.tfd.tfb_fpc, tf_rebase.tfb.tfd, tf_rebase.tfb.tfb dispatch object_from.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_rebase.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Change (basis) representation of a tf-object — tf_rebase","text":"tf_rebase(tfd): re-express tfd-vector representation  tf-vector tf_rebase(tfb): re-express tfb-vector representation  tf-vector.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_rgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian Process random generator — tf_rgp","title":"Gaussian Process random generator — tf_rgp","text":"Generates n realizations zero-mean Gaussian process. function also accepts user-defined covariance functions (without \"nugget\" effect, see cov), implemented defaults scale parameter \\(\\phi\\), order \\(o\\) nugget effect variance \\(\\sigma^2\\) : squared exponential covariance \\(Cov(x(t), x(t')) = \\exp(-(t-t')^2)/\\phi) + \\sigma^2 \\delta_{t}(t')\\). Wiener process covariance \\(Cov(x(t), x(t')) = \\min(t',t)/\\phi + \\sigma^2 \\delta_{t}(t')\\), Matèrn process covariance \\(Cov(x(t), x(t')) = \\tfrac{2^{1-o}}{\\Gamma(o)} (\\tfrac{\\sqrt{2o}|t-t'|}{\\phi})^o \\text{Bessel}_o(\\tfrac{\\sqrt{2o}|t-t'|}{s}) + \\sigma^2 \\delta_{t}(t')\\)","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_rgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian Process random generator — tf_rgp","text":"","code":"tf_rgp(   n,   arg = 51L,   cov = c(\"squareexp\", \"wiener\", \"matern\"),   scale = diff(range(arg))/10,   nugget = scale/200,   order = 1.5 )"},{"path":"https://tidyfun.github.io/tf/reference/tf_rgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian Process random generator — tf_rgp","text":"n many realizations draw arg vector evaluation points (arg return object). Defaults (0, 0.02, 0.04, ..., 1). given single integer (forget L...), creates  regular grid length (0,1). cov type covariance function use. Implemented defaults \"squareexp\", \"wiener\", \"matern\", see Description. Can also vectorized function returning \\(Cov(x(t), x(t'))\\) without nugget effect pairs inputs t t'. scale scale parameter (see Description). Defaults width domain divided 10. nugget nugget effect additional white noise / unstructured variability. Defaults scale/200 (: little white noise). order order Matèrn covariance (used, must >0), defaults 1.5. higher, smoother process. Evaluation covariance function becomes numerically unstable large (>20) order, use \"squareexp\".","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_rgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian Process random generator — tf_rgp","text":"tfd-vector length n","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple smoothing of tf objects — tf_smooth","title":"Simple smoothing of tf objects — tf_smooth","text":"Apply running means medians, lowess Savitzky-Golay filtering smooth functional data. nothing tfb-objects, smoothed using smaller basis / stronger penalty.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple smoothing of tf objects — tf_smooth","text":"","code":"tf_smooth(x, ...)  # S3 method for tfb tf_smooth(x, verbose = TRUE, ...)  # S3 method for tfd tf_smooth(   x,   method = c(\"lowess\", \"rollmean\", \"rollmedian\", \"savgol\"),   verbose = TRUE,   ... )"},{"path":"https://tidyfun.github.io/tf/reference/tf_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple smoothing of tf objects — tf_smooth","text":"x tf object containing functional data ... arguments respective method. See Details. verbose give lots diagnostic messages? Defaults TRUE method one \"lowess\" (see stats::lowess()), \"rollmean\", \"rollmedian\" (see zoo::rollmean()) \"savgol\" (see pracma::savgol())","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple smoothing of tf objects — tf_smooth","text":"smoothed version input. methods/options, smoothed functions may shorter original ones (ends).","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple smoothing of tf objects — tf_smooth","text":"tf_smooth.tfd overrides/automatically sets defaults used methods: lowess uses span parameter f = 0.15 (instead 0.75) default. rollmean/median use window size k = $<$number grid points$>$/20 (.e., nearest odd integer ) sets fill=   \"extend\" (.e., constant extrapolation replace missing values extremes domain) default. Use fill= NA zoo's default behavior shortening smoothed series. savgol uses window size k = $<$number grid points$>$/10 (.e., nearest odd integer ).","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple smoothing of tf objects — tf_smooth","text":"","code":"library(zoo) #>  #> Attaching package: ‘zoo’ #> The following objects are masked from ‘package:base’: #>  #>     as.Date, as.Date.numeric library(pracma) f <- tf_sparsify(tf_jiggle(tf_rgp(4, 201, nugget = 0.05))) f_lowess <- tf_smooth(f, \"lowess\") #> using f = 0.15 as smoother span for lowess # these methods ignore the distances between arg-values: f_mean <- tf_smooth(f, \"rollmean\") #> Warning: non-equidistant arg-values in ‘f’ ignored by rollmean. #> using k = 5 observations for rolling data window. #> setting fill = 'extend' for start/end values. f_median <- tf_smooth(f, \"rollmean\", k = 31) #> Warning: non-equidistant arg-values in ‘f’ ignored by rollmean. #> setting fill = 'extend' for start/end values. f_sg <- tf_smooth(f, \"savgol\", fl = 31) #> Warning: non-equidistant arg-values in ‘f’ ignored by savgol. layout(t(1:4)) plot(f, points = FALSE, main = \"original\") plot(f_lowess,   points = FALSE, col = \"blue\", main = \"lowess (default,\\n span 0.9 in red)\" ) lines(tf_smooth(f, \"lowess\", f = 0.9), col = \"red\", alpha = 0.2) plot(f_mean,   points = FALSE, col = \"blue\", main = \"rolling means &\\n medians (red)\" ) lines(f_median, col = \"red\", alpha = 0.2) # note constant extrapolation at both ends! plot(f, points = FALSE, main = \"orginal and\\n savgol (red)\") lines(f_sg, col = \"red\")"},{"path":"https://tidyfun.github.io/tf/reference/tf_where.html","id":null,"dir":"Reference","previous_headings":"","what":"Find out where functional data fulfills certain conditions. — tf_where","title":"Find out where functional data fulfills certain conditions. — tf_where","text":"tf_where allows define logical expression function values returns argument values condition true.tf_anywhere syntactic sugar tf_where return = \"\" get logical flag function condition TRUE anywhere, see .","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_where.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find out where functional data fulfills certain conditions. — tf_where","text":"","code":"tf_where(f, cond, return = c(\"all\", \"first\", \"last\", \"range\", \"any\"), arg)  tf_anywhere(f, cond, arg)"},{"path":"https://tidyfun.github.io/tf/reference/tf_where.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find out where functional data fulfills certain conditions. — tf_where","text":"f tf object cond logical expression value (/arg) defines condition functions, see examples details. return entry f, tf_where either returns arg cond true, first, last range logical flags whether functions fullfill condition anywhere. \"range\", note cond may true arg values range, though, checked. arg optional arg-values evaluate f check cond, defaults tf_arg(f).","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_where.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find out where functional data fulfills certain conditions. — tf_where","text":"depends  return: return = \"\", .e, anywhere: logical vector length f. return = \"\": list vectors length f, empty vectors functions  never fulfill condition. return = \"range\": data frame columns \"begin\" \"end\". else, numeric vector length f NA entries f nowhere fulfill condition.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_where.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find out where functional data fulfills certain conditions. — tf_where","text":"Entries f fulfill cond anywhere yield numeric(0).cond  evaluated base::subset()-statement data.frame containing single entry f columns arg value, usual dplyr tricks available well, see examples. condition evaluates NA NA-entries f.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_where.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find out where functional data fulfills certain conditions. — tf_where","text":"","code":"lin <- 1:4 * tfd(seq(-1, 1, length.out = 11), seq(-1, 1, length.out = 11)) tf_where(lin, value %inr% c(-1, 0.5)) #> [[1]] #> [1] -1.0 -0.8 -0.6 -0.4 -0.2  0.0  0.2  0.4 #>  #> [[2]] #> [1] -0.4 -0.2  0.0  0.2 #>  #> [[3]] #> [1] -0.2  0.0 #>  #> [[4]] #> [1] -0.2  0.0 #>  tf_where(lin, value %inr% c(-1, 0.5), \"range\") #>   begin end #> 1  -1.0 0.4 #> 2  -0.4 0.2 #> 3  -0.2 0.0 #> 4  -0.2 0.0 a <- 1 tf_where(lin, value > a, \"first\") #> [1]  NA 0.6 0.4 0.4 tf_where(lin, value < a, \"last\") #> [1] 0.8 0.4 0.2 0.2 tf_where(lin, value > 2, \"any\") #> [1] FALSE FALSE  TRUE  TRUE tf_anywhere(lin, value > 2) #> [1] FALSE FALSE  TRUE  TRUE  set.seed(4353) f <- tf_rgp(5, 11) plot(f, pch = as.character(1:5), points = TRUE)  tf_where(f, value == max(value)) #> $`1` #> [1] 0 #>  #> $`2` #> [1] 0.4 #>  #> $`3` #> [1] 0.2 #>  #> $`4` #> [1] 0.6 #>  #> $`5` #> [1] 0.1 #>  # where is the function increasing/decreasing? tf_where(f, value > dplyr::lag(value, 1, value[1])) #> $`1` #> [1] 0.4 0.5 0.6 #>  #> $`2` #> [1] 0.1 0.2 0.3 0.4 #>  #> $`3` #> [1] 0.1 0.2 0.6 0.7 0.8 0.9 1.0 #>  #> $`4` #> [1] 0.1 0.2 0.3 0.4 0.5 0.6 1.0 #>  #> $`5` #> [1] 0.1 0.7 0.8 0.9 1.0 #>  tf_where(f, value < dplyr::lead(value, 1, tail(value, 1))) #> $`1` #> [1] 0.3 0.4 0.5 #>  #> $`2` #> [1] 0.0 0.1 0.2 0.3 #>  #> $`3` #> [1] 0.0 0.1 0.5 0.6 0.7 0.8 0.9 #>  #> $`4` #> [1] 0.0 0.1 0.2 0.3 0.4 0.5 0.9 #>  #> $`5` #> [1] 0.0 0.6 0.7 0.8 0.9 #>  # where are the (interior) extreme points (sign changes of `diff(value)`)? tf_where(   f,   sign(c(diff(value)[1], diff(value))) !=     sign(c(diff(value), tail(diff(value), 1))) ) #> $`1` #> [1] 0.3 0.6 #>  #> $`2` #> [1] 0.4 #>  #> $`3` #> [1] 0.2 0.5 #>  #> $`4` #> [1] 0.6 0.9 #>  #> $`5` #> [1] 0.1 0.6 #>  # where in its second half is the function positive? tf_where(f, arg > 0.5 & value > 0) #> $`1` #> numeric(0) #>  #> $`2` #> [1] 0.6 0.7 0.8 0.9 1.0 #>  #> $`3` #> [1] 0.9 1.0 #>  #> $`4` #> [1] 0.6 0.7 0.8 0.9 1.0 #>  #> $`5` #> [1] 1 #>  # does the function ever exceed? tf_anywhere(f, value > 1) #>     1     2     3     4     5  #> FALSE  TRUE FALSE  TRUE FALSE"},{"path":"https://tidyfun.github.io/tf/reference/tf_zoom.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to zoom in/out on functions — tf_zoom","title":"Functions to zoom in/out on functions — tf_zoom","text":"used redefine restrict domain tf objects.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_zoom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to zoom in/out on functions — tf_zoom","text":"","code":"tf_zoom(f, begin, end, ...)  # S3 method for tfd tf_zoom(f, begin = tf_domain(f)[1], end = tf_domain(f)[2], ...)  # S3 method for tfb tf_zoom(f, begin = tf_domain(f)[1], end = tf_domain(f)[2], ...)  # S3 method for tfb_fpc tf_zoom(f, begin = tf_domain(f)[1], end = tf_domain(f)[2], ...)"},{"path":"https://tidyfun.github.io/tf/reference/tf_zoom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to zoom in/out on functions — tf_zoom","text":"f tf-object begin numeric vector length 1 length(f). Defaults lower limit domain f. end numeric vector length 1 length(f). Defaults upper limit domain f. ... used","code":""},{"path":"https://tidyfun.github.io/tf/reference/tf_zoom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to zoom in/out on functions — tf_zoom","text":"object like f new domain (potentially). Note regular functional data functions basis representation turned irregular tfd-objects iff begin end scalar.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tf_zoom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to zoom in/out on functions — tf_zoom","text":"","code":"x <- tf_rgp(10) plot(x) tf_zoom(x, 0.5, 0.9) #> tfd[10] on (0.5,0.9) based on 21 evaluations each #> interpolation by tf_approx_linear  #> 1: (0.50,-0.062);(0.52,-0.141);(0.54,-0.226); ... #> 2: (0.50,  0.53);(0.52,  0.53);(0.54,  0.51); ... #> 3: (0.50, -0.50);(0.52, -0.54);(0.54, -0.58); ... #> 4: (0.50, -0.26);(0.52, -0.22);(0.54, -0.25); ... #> 5: (0.50, -0.70);(0.52, -0.70);(0.54, -0.67); ... #>     [....]   (5 not shown) tf_zoom(x, 0.5, 0.9) |> lines(col = \"red\") tf_zoom(x, seq(0, 0.5, length.out = 10), seq(0.5, 1, length.out = 10)) |>   lines(col = \"blue\", lty = 3)"},{"path":"https://tidyfun.github.io/tf/reference/tfb.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructors for functional data in basis representation — tfb","title":"Constructors for functional data in basis representation — tfb","text":"Various constructors tfb-vectors different kinds inputs.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructors for functional data in basis representation — tfb","text":"","code":"tfb(data = data.frame(), basis = c(\"spline\", \"fpc\", \"wavelet\"), ...)  tfb_wavelet(data, ...)  as.tfb(data, basis = c(\"spline\", \"fpc\"), ...)"},{"path":"https://tidyfun.github.io/tf/reference/tfb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructors for functional data in basis representation — tfb","text":"data matrix, data.frame list suitable shape, another tf-object containing functional data. basis either \"spline\" (see tfb_spline(), default) \"fpc\" (see tfb_fpc()). (wavelet implemented yet) ... arguments tfb_spline() tfb_fpc()","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructors for functional data in basis representation — tfb","text":"tfb-object (data.frame/matrix conversion functions, obviously.)","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructors for functional data in basis representation — tfb","text":"tfb wrapper functions set spline-, principal component- wavelet-based representations functional data. three, input data \\(x_i(t)\\) represented weighted sums set common basis functions \\(B_k(t); k = 1,\\dots, K\\) identical observations weight coefficient vectors \\(b_i = (b_{i1}, \\dots, b_{iK})\\) estimated observation: \\(x_i(t) \\approx \\sum_k B_k(t) b_{ik}\\). Depending value basis, basis functions \\(B(t)\\) either spline functions first estimated eigenfunctions covariance operator \\(x(t)\\) (fpc) wavelets (wavelet). See tfb_spline() details spline basis representation (default). See tfb_fpc() using functional principal component representation orthonormal basis estimated data instead.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tfb_fpc.html","id":null,"dir":"Reference","previous_headings":"","what":"Functional data in FPC-basis representation — tfb_fpc","title":"Functional data in FPC-basis representation — tfb_fpc","text":"functions perform (functional) principal component analysis (FPCA) input data return tfb_fpc tf-object uses empirical eigenfunctions basis functions representing data. default (\"method = fpc_wsvd\") uses (truncated) weighted SVD complete data common grid nuclear-norm regularized (truncated) weighted SVD partially missing data common grid, see fpc_wsvd(). latter likely break high PVE /high amounts missingness.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_fpc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functional data in FPC-basis representation — tfb_fpc","text":"","code":"tfb_fpc(data, ...)  # S3 method for data.frame tfb_fpc(   data,   id = 1,   arg = 2,   value = 3,   domain = NULL,   method = fpc_wsvd,   ... )  # S3 method for matrix tfb_fpc(data, arg = NULL, domain = NULL, method = fpc_wsvd, ...)  # S3 method for numeric tfb_fpc(data, arg = NULL, domain = NULL, method = fpc_wsvd, ...)  # S3 method for tf tfb_fpc(data, arg = NULL, method = fpc_wsvd, ...)  # S3 method for default tfb_fpc(data, arg = NULL, domain = NULL, method = fpc_wsvd, ...)"},{"path":"https://tidyfun.github.io/tf/reference/tfb_fpc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functional data in FPC-basis representation — tfb_fpc","text":"data matrix, data.frame list suitable shape, another tf-object containing functional data. ... arguments method computes (regularized/smoothed) FPCA - see e.g. fpc_wsvd(). Unless set user, uses proportion variance explained pve = 0.995 determine truncation levels. id name number column defining data belong function. arg numeric, list numerics. evaluation grid. data.frame-method: name/number column defining evaluation grid. matrix method try guess suitable arg-values column names data arg supplied. methods fall back integer sequences (1:<length data>) default provided. value name number column containing function evaluations. domain range arg. method function use computes eigenfunctions scores. Defaults fpc_wsvd(), quick easy returns completely unsmoothed eigenfunctions unlikely suited noisy data.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_fpc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functional data in FPC-basis representation — tfb_fpc","text":"object class tfb_fpc, inheriting tfb. basis used tfb_fpc tfd-vector containing estimated mean eigenfunctions.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_fpc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functional data in FPC-basis representation — tfb_fpc","text":"FPC basis, factorization method accepts data.frame columns id, arg, value containing functional data returns list eigenfunctions FPC scores structured like return object fpc_wsvd() can used `method`` argument, see example . Note mean function, fixed \"score\" 1 functions, used first basis function FPC bases.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_fpc.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Functional data in FPC-basis representation — tfb_fpc","text":"tfb_fpc(default): convert tfb: default method, returning prototype data NULL","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tfb_fpc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functional data in FPC-basis representation — tfb_fpc","text":"","code":"set.seed(13121) x <- tf_rgp(25, nugget = .02) x_pc <- tfb_fpc(x, pve = .9) x_pc #> tfb[25] on (0,1) in basis representation: #>  using  4 FPCs  #> 1: (0.00,-0.138);(0.02,-0.067);(0.04,-0.046); ... #> 2: (0.00,  0.12);(0.02,  0.20);(0.04,  0.18); ... #> 3: (0.00, -0.94);(0.02, -0.91);(0.04, -1.02); ... #> 4: (0.00, -0.40);(0.02, -0.21);(0.04, -0.19); ... #> 5: (0.00,  -1.5);(0.02,  -1.5);(0.04,  -1.5); ... #>     [....]   (20 not shown) plot(x, lwd = 3) lines(x_pc, col = 2, lty = 2) x_pc_full <- tfb_fpc(x, pve = .995) x_pc_full #> tfb[25] on (0,1) in basis representation: #>  using  15 FPCs  #> 1: (0.00, 0.172);(0.02,-0.019);(0.04, 0.238); ... #> 2: (0.00,  0.20);(0.02,  0.37);(0.04,  0.29); ... #> 3: (0.00, -0.98);(0.02, -1.05);(0.04, -1.03); ... #> 4: (0.00, -0.99);(0.02, -0.65);(0.04, -0.47); ... #> 5: (0.00,  -1.5);(0.02,  -1.6);(0.04,  -1.6); ... #>     [....]   (20 not shown) lines(x_pc_full, col = 3, lty = 2)  # partially missing data on common grid: x_mis <- x |> tf_sparsify(dropout = .05) x_pc_mis <- tfb_fpc(x_mis, pve = .9) #> Using softImpute SVD on 5.3% missing data x_pc_mis #> tfb[25] on (0,1) in basis representation: #>  using  4 FPCs  #> 1: (0.00,-0.207);(0.02,-0.084);(0.04,-0.046); ... #> 2: (0.00, 0.055);(0.02, 0.167);(0.04, 0.197); ... #> 3: (0.00, -0.85);(0.02, -0.78);(0.04, -0.78); ... #> 4: (0.00, -0.34);(0.02, -0.20);(0.04, -0.15); ... #> 5: (0.00,  -1.5);(0.02,  -1.4);(0.04,  -1.4); ... #>     [....]   (20 not shown) plot(x_mis, lwd = 3) lines(x_pc_mis, col = 4, lty = 2)  # extract FPC basis -- # first \"eigenvector\" in black is (always) the mean function x_pc |> tf_basis(as_tfd = TRUE) |> plot(col = 1:5)  # \\donttest{ # Apply FPCA for sparse, irregular data using refund::fpca.sc: set.seed(99290) # create small, sparse, irregular data: x_irreg <- x[1:8] |>   tf_jiggle() |> tf_sparsify(dropout = 0.3) plot(x_irreg) x_df <- x_irreg |>   as.data.frame(unnest = TRUE) # wrap refund::fpca_sc for use as FPCA method in tfb_fpc: fpca_sc_wrapper <- function(data, arg, pve = 0.995, ...) {   data_mat <- tfd(data) |> as.matrix(interpolate = TRUE)   fpca <- refund::fpca.sc(     Y = data_mat, argvals = attr(data_mat, \"arg\"), pve = pve, ...   )   c(fpca[c(\"mu\", \"efunctions\", \"scores\", \"npc\")],     scoring_function = tf:::.fpc_wsvd_scores) } x_pc <- tfb_fpc(x_df, method = fpca_sc_wrapper) lines(x_pc, col = 2, lty = 2)  # }"},{"path":"https://tidyfun.github.io/tf/reference/tfb_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Spline-based representation of functional data — tfb_spline","title":"Spline-based representation of functional data — tfb_spline","text":"Represent curves weighted sum spline basis functions.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spline-based representation of functional data — tfb_spline","text":"","code":"tfb_spline(data, ...)  # S3 method for data.frame tfb_spline(   data,   id = 1,   arg = 2,   value = 3,   domain = NULL,   penalized = TRUE,   global = FALSE,   verbose = TRUE,   ... )  # S3 method for matrix tfb_spline(   data,   arg = NULL,   domain = NULL,   penalized = TRUE,   global = FALSE,   verbose = TRUE,   ... )  # S3 method for numeric tfb_spline(   data,   arg = NULL,   domain = NULL,   penalized = TRUE,   global = FALSE,   verbose = TRUE,   ... )  # S3 method for list tfb_spline(   data,   arg = NULL,   domain = NULL,   penalized = TRUE,   global = FALSE,   verbose = TRUE,   ... )  # S3 method for tfd tfb_spline(   data,   arg = NULL,   domain = NULL,   penalized = TRUE,   global = FALSE,   verbose = TRUE,   ... )  # S3 method for tfb tfb_spline(   data,   arg = NULL,   domain = NULL,   penalized = TRUE,   global = FALSE,   verbose = TRUE,   ... )  # S3 method for default tfb_spline(   data,   arg = NULL,   domain = NULL,   penalized = TRUE,   global = FALSE,   verbose = TRUE,   ... )"},{"path":"https://tidyfun.github.io/tf/reference/tfb_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spline-based representation of functional data — tfb_spline","text":"data matrix, data.frame list suitable shape, another tf-object containing functional data. ... arguments calls mgcv::s() setting basis (mgcv::magic() mgcv::gam.fit() penalized = TRUE). Uses k = 25 cubic regression spline basis functions (bs = \"cr\") default, set appropriately user. See Details examples vignettes. id name number column defining data belong function. arg numeric, list numerics. evaluation grid. data.frame-method: name/number column defining evaluation grid. matrix method try guess suitable arg-values column names data arg supplied. methods fall back integer sequences (1:<length data>) default provided. value name number column containing function evaluations. domain range arg. penalized TRUE (default) estimates regularized/penalized basis coefficients via mgcv::magic() mgcv::gam.fit(), FALSE yields ordinary least squares / ML estimates basis coefficients. FALSE much faster overfit noisy data k () large. global Defaults FALSE. TRUE penalized = TRUE, functions share smoothing parameter (see Details). verbose TRUE (default) outputs statistics fit achieved basis diagnostic messages.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spline-based representation of functional data — tfb_spline","text":"tfb-object","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_spline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spline-based representation of functional data — tfb_spline","text":"basis used set via call mgcv::s() spline bases discussed mgcv::smooth.terms() available, principle. Depending value penalized- global-flags, coefficient vectors observation estimated via fitting GAM (separately observation, !global) via mgcv::magic() (least square error, default) mgcv::gam() (family argument supplied) unpenalized least squares / maximum likelihood. \"smoothed\" representation computed, amount smoothing performed reported terms \"percentage variability preserved\", variance (explained deviance, general case family specified) smoothed function values divided variance original values (null deviance, general case). Reporting can switched verbose = FALSE. ... arguments supplies arguments spline basis (via mgcv::s()) estimation (via mgcv::magic() mgcv::gam()), important arguments : k: many basis functions spline basis use, default 25. bs: type spline basis used, default cubic regression splines (bs = \"cr\") family argument: use minimizing squared errors reasonable criterion representation accuracy (see mgcv::family.mgcv() available) /function values restricted e.g. positive (family = Gamma()/tw()/...), \\([0,1]\\)  (family = betar()), etc. sp: numeric value smoothness penalty weight, manually setting amount smoothing curves, see mgcv::s(). (drastically) reduces computation time. Defaults -1, .e., automatic optimization sp using mgcv::magic() (LS fits) mgcv::gam() (GLM), source code R/tfb-spline-utils.R. global == TRUE, uses small subset curves (10% curves, least 5, 100; non-random sample using every j-th curve data) smoothing parameters per curve estimated takes mean log smoothing parameter sp curves. much faster optimizing curve large data sets. sparse noisy curves, estimating common smoothing parameter based data curves simultaneously likely yield better results, implemented .","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfb_spline.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Spline-based representation of functional data — tfb_spline","text":"tfb_spline(data.frame): convert data frames tfb_spline(matrix): convert matrices tfb_spline(numeric): convert matrices tfb_spline(list): convert lists tfb_spline(tfd): convert tfd (raw functional data) tfb_spline(tfb): convert tfb: modify basis representation, smoothing. tfb_spline(default): convert tfb: default method, returning prototype data missing","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tfbrackets.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessing, evaluating, subsetting and subassigning tf vectors — tfbrackets","title":"Accessing, evaluating, subsetting and subassigning tf vectors — tfbrackets","text":"functions access, subset, replace evaluate tf objects. information creating tf objects converting /list, data.frame matrix, see tfd() tfb(). See Details.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfbrackets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessing, evaluating, subsetting and subassigning tf vectors — tfbrackets","text":"","code":"# S3 method for tf [(x, i, j, interpolate = TRUE, matrix = TRUE)  # S3 method for tf [(x, i) <- value"},{"path":"https://tidyfun.github.io/tf/reference/tfbrackets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessing, evaluating, subsetting and subassigning tf vectors — tfbrackets","text":"x tf index observations (integerish, character logical, usual R rules apply) j arg used evaluate functions. (list ) numeric vectors. interpreted column number argument value respective functional datum. interpolate functions evaluated (.e., inter-/extrapolated) values arg original data available? relevant raw data class tfd, defaults TRUE. Basis-represented tfb always \"interpolated\". matrix result returned matrix list data.frames? TRUE, j (list ) single vector arg. See return value. value tf object subassignment. typed strictly concatenation:  subassignment happens common type value x type x, subassignment never changes type x may potentially lossy cast value type x (warning).","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfbrackets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessing, evaluating, subsetting and subassigning tf vectors — tfbrackets","text":"j missing, subset functions x given . j given matrix == TRUE, numeric matrix function evaluations row represents one function column represents one argval given argument j, attribute arg=j row- column-names derived x[] j. j given matrix == FALSE, list tbl_dfs columns arg = j value = evaluations j observation .","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfbrackets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accessing, evaluating, subsetting and subassigning tf vectors — tfbrackets","text":"Note break certain (terrible) R conventions vector-like objects: argument recycling, indexing NA, indexing names present x, indexing integers > length(x) trigger errors.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfbrackets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessing, evaluating, subsetting and subassigning tf vectors — tfbrackets","text":"","code":"x <- 1:3 * tfd(data = 0:10, arg = 0:10) plot(x)  # this operator's 2nd argument is quite overloaded -- you can: # 1. simply extract elements from the vector if no second arg is given: x[1] #> tfd[1] on (0,10) based on 11 evaluations each #> interpolation by tf_approx_linear  #> [1]: (0,0);(1,1);(2,2); ... x[c(TRUE, FALSE, FALSE)] #> tfd[1] on (0,10) based on 11 evaluations each #> interpolation by tf_approx_linear  #> [1]: (0,0);(1,1);(2,2); ... x[-(2:3)] #> tfd[1] on (0,10) based on 11 evaluations each #> interpolation by tf_approx_linear  #> [1]: (0,0);(1,1);(2,2); ... # 2. use the second argument and optional additional arguments to #    extract specific function evaluations in a number of formats: x[1:2, c(4.5, 9)] # returns a matrix of function evaluations #>      4.5  9 #> [1,] 4.5  9 #> [2,] 9.0 18 #> attr(,\"arg\") #> [1] 4.5 9.0 x[1:2, c(4.5, 9), interpolate = FALSE] # NA for arg-values not in the original data #> Warning: interpolate = FALSE & no evaluations for some <j>: NAs created. #>      4.5  9 #> [1,]  NA  9 #> [2,]  NA 18 #> attr(,\"arg\") #> [1] 4.5 9.0 x[-3, seq(1, 9, by = 2), matrix = FALSE] # list of data.frames for each function #> [[1]] #>   arg value #> 1   1     1 #> 2   3     3 #> 3   5     5 #> 4   7     7 #> 5   9     9 #>  #> [[2]] #>   arg value #> 1   1     2 #> 2   3     6 #> 3   5    10 #> 4   7    14 #> 5   9    18 #>  # in order to evaluate a set of observed functions on a new grid and # save them as a functional data vector again, use `tfd` or `tfb` instead: tfd(x, arg = seq(0, 10, by = 0.01)) #> tfd[3] on (0,10) based on 1001 evaluations each #> interpolation by tf_approx_linear  #> [1]: (0.00,0.00);(0.01,0.01);(0.02,0.02); ... #> [2]: (0.00,0.00);(0.01,0.02);(0.02,0.04); ... #> [3]: (0.00,0.00);(0.01,0.03);(0.02,0.06); ..."},{"path":"https://tidyfun.github.io/tf/reference/tfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructors for vectors of ","title":"Constructors for vectors of ","text":"Various constructor methods tfd-objects. tfd.matrix accepts numeric matrix one function per row (!). arg provided, tries guess arg column names falls back 1:ncol(data) fails. tfd.data.frame uses first 3 columns data function information default: (id, arg, value) tfd.list accepts list vectors identical lengths containing evaluations list 2-column matrices/data.frames arg first evaluations second column tfd.default returns class prototype argument tfd() NULL recognised class","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructors for vectors of ","text":"","code":"tfd(data, ...)  # S3 method for matrix tfd(data, arg = NULL, domain = NULL, evaluator = tf_approx_linear, ...)  # S3 method for numeric tfd(data, arg = NULL, domain = NULL, evaluator = tf_approx_linear, ...)  # S3 method for data.frame tfd(   data,   id = 1,   arg = 2,   value = 3,   domain = NULL,   evaluator = tf_approx_linear,   ... )  # S3 method for list tfd(data, arg = NULL, domain = NULL, evaluator = tf_approx_linear, ...)  # S3 method for tf tfd(data, arg = NULL, domain = NULL, evaluator = NULL, ...)  # S3 method for default tfd(data, arg = NULL, domain = NULL, evaluator = tf_approx_linear, ...)  as.tfd(data, ...)  as.tfd_irreg(data, ...)"},{"path":"https://tidyfun.github.io/tf/reference/tfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructors for vectors of ","text":"data matrix, data.frame list suitable shape, another tf-object. argument NULL (.e. calling tfd()) returns prototype class tfd ... used tfd, except tfd.tf -- specify arg ìnterpolate = TRUE turn irregular tfd regular one, see examples. arg numeric, list numerics. evaluation grid. data.frame-method: name/number column defining evaluation grid. matrix method try guess suitable arg-values column names data arg supplied. methods fall back integer sequences (1:<length data>) default provided. domain range arg. evaluator function accepting arguments x, arg, evaluations. See details tfd(). id name number column defining data belong function. value name number column containing function evaluations.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructors for vectors of ","text":"tfd-object (data.frame/matrix conversion functions, obviously.)","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Constructors for vectors of ","text":"evaluator: must (quoted bare) name function signature function(x, arg, evaluations) returns functions' (approximated/interpolated) values locations x based function evaluations available locations arg. Available evaluator-functions: tf_approx_linear linear interpolation without extrapolation (.e., zoo::na.approx() na.rm = FALSE)  -- default, tf_approx_spline cubic spline interpolation, (.e., zoo::na.spline() na.rm = FALSE), tf_approx_fill_extend linear interpolation constant extrapolation (.e., zoo::na.fill() fill = \"extend\") tf_approx_locf \"last observation carried forward\"  (.e., zoo::na.locf() na.rm = FALSE tf_approx_nocb \"next observation carried backward\" (.e., zoo::na.locf() na.rm = FALSE, fromLast = TRUE). See tf:::zoo_wrapper tf:::tf_approx_linear, simply zoo_wrapper(zoo::na.tf_approx, na.rm = FALSE), examples implementations .","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructors for vectors of ","text":"","code":"# turn irregular to regular tfd by evaluating on a common grid:  f <- c(   tf_rgp(1, arg = seq(0, 1, length.out = 11)),   tf_rgp(1, arg = seq(0, 1, length.out = 21)) ) #> Warning: combining incompatible <tfd_reg> with <tfd_reg> by casting to <tfd_irreg>. tfd(f, arg = seq(0, 1, length.out = 21)) #> New names: #> • `1` -> `1...1` #> • `1` -> `1...2` #> tfd[2] on (0,1) based on 21 evaluations each #> interpolation by tf_approx_linear  #> 1...1: (0.00,-0.32);(0.05,-0.24);(0.10,-0.16); ... #> 1...2: (0.00,-0.84);(0.05,-1.05);(0.10,-1.22); ...  set.seed(1213) f <- tf_rgp(3, arg = seq(0, 1, length.out = 51)) |> tf_sparsify(0.9) # does not yield regular data because linear extrapolation yields NAs #   outside observed range: tfd(f, arg = seq(0, 1, length.out = 101)) #> Warning: 86 evaluations were NA, returning irregular tfd. #> irregular tfd[3] on (0,1) based on 59 to 87 (mean: 72) evaluations each #> interpolation by tf_approx_linear  #> 1: (0.20, 0.50);(0.21, 0.48);(0.22, 0.46); ... #> 2: (0.12,-0.34);(0.13,-0.30);(0.14,-0.26); ... #> 3: (0.04,-0.43);(0.05,-0.43);(0.06,-0.42); ... # this \"works\" (but may not yield sensible values..!!) for #   e.g. constant extrapolation: tfd(f, evaluator = tf_approx_fill_extend, arg = seq(0, 1, length.out = 101)) #> tfd[3] on (0,1) based on 101 evaluations each #> interpolation by tf_approx_fill_extend  #> 1: (0.00,  0.5);(0.01,  0.5);(0.02,  0.5); ... #> 2: (0.00,-0.34);(0.01,-0.34);(0.02,-0.34); ... #> 3: (0.00,-0.43);(0.01,-0.43);(0.02,-0.43); ... plot(f, col = 2) tfd(f,   arg = seq(0, 1, length.out = 151), evaluator = tf_approx_fill_extend ) |> lines()"},{"path":"https://tidyfun.github.io/tf/reference/tfdisplay.html","id":null,"dir":"Reference","previous_headings":"","what":"Pretty printing and formatting for functional data — print.tf","title":"Pretty printing and formatting for functional data — print.tf","text":"Print/format tf-objects.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfdisplay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pretty printing and formatting for functional data — print.tf","text":"","code":"# S3 method for tf print(x, n = 5, ...)  # S3 method for tfd_reg print(x, n = 5, ...)  # S3 method for tfd_irreg print(x, n = 5, ...)  # S3 method for tfb print(x, n = 5, ...)  # S3 method for tf format(   x,   digits = 2,   nsmall = 0,   width = options()$width,   n = 5,   prefix = TRUE,   ... )"},{"path":"https://tidyfun.github.io/tf/reference/tfdisplay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pretty printing and formatting for functional data — print.tf","text":"x R object (conceptually); typically numeric. n many elements x print ... arguments passed methods. digits positive integer indicating many significant digits     used     numeric complex x.  default, NULL, uses     getOption(\"digits\").  suggestion: enough decimal     places used smallest (magnitude) number     many significant digits, also satisfy nsmall.     (, notably interpretation complex numbers see     signif.) nsmall minimum number digits right decimal     point formatting real/complex numbers non-scientific formats.     Allowed values 0 <= nsmall <= 20. width default method: minimum field width     NULL 0 restriction. AsIs method: maximum field width non-character     objects.  NULL corresponds default 12. prefix used internally.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfdisplay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pretty printing and formatting for functional data — print.tf","text":"prints x returns invisibly","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfgroupgenerics.html","id":null,"dir":"Reference","previous_headings":"","what":"Math, Summary and Ops Methods for tf — Ops.tf","title":"Math, Summary and Ops Methods for tf — Ops.tf","text":"methods operators mostly work arg-value-wise tf objects, see ?groupGeneric implementation details.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfgroupgenerics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Math, Summary and Ops Methods for tf — Ops.tf","text":"","code":"# S3 method for tf Ops(e1, e2)  # S3 method for tfd ==(e1, e2)  # S3 method for tfd !=(e1, e2)  # S3 method for tfb ==(e1, e2)  # S3 method for tfb !=(e1, e2)  # S3 method for tfd Ops(e1, e2)  # S3 method for tfb Ops(e1, e2)  # S3 method for tfd Math(x, ...)  # S3 method for tfb Math(x, ...)  # S3 method for tf Summary(...)  # S3 method for tfd cummax(...)  # S3 method for tfd cummin(...)  # S3 method for tfd cumsum(...)  # S3 method for tfd cumprod(...)  # S3 method for tfb cummax(...)  # S3 method for tfb cummin(...)  # S3 method for tfb cumsum(...)  # S3 method for tfb cumprod(...)"},{"path":"https://tidyfun.github.io/tf/reference/tfgroupgenerics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Math, Summary and Ops Methods for tf — Ops.tf","text":"e1 tf numeric vector e2 tf numeric vector x tf ... tf-objects (used Math group generic)","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfgroupgenerics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Math, Summary and Ops Methods for tf — Ops.tf","text":"tf- logical vector computed result","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfgroupgenerics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Math, Summary and Ops Methods for tf — Ops.tf","text":"See examples . Equality checks functional objects even iffy usual computer math reliable. Note max min guaranteed maximal/minimal entire domain, evaluation grid used computation. exception addition multiplication, operations tfb-objects first evaluate data arg, perform computations evaluations convert back tfb- object, loss precision expected -- especially small spline bases /wiggly data.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tfgroupgenerics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Math, Summary and Ops Methods for tf — Ops.tf","text":"","code":"set.seed(1859) f <- tf_rgp(4) 2 * f == f + f #>    1    2    3    4  #> TRUE TRUE TRUE TRUE  sum(f) == f[1] + f[2] + f[3] + f[4] #> [1] TRUE log(exp(f)) == f #>    1    2    3    4  #> TRUE TRUE TRUE TRUE  plot(f, points = FALSE) lines(range(f), col = 2, lty = 2)   f2 <- tf_rgp(5) |> exp() |> tfb(k = 25) #> Percentage of input data variability preserved in basis representation #> (per functional observation, approximate): #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   99.70   99.80   99.90   99.86   99.90  100.00  layout(t(1:3)) plot(f2, col = gray.colors(5)) plot(cummin(f2), col = gray.colors(5)) plot(cumsum(f2), col = gray.colors(5))   # ?tf_integrate for integrals, ?tf_fwise for scalar summaries of each function"},{"path":"https://tidyfun.github.io/tf/reference/tfmethods.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions for tf-objects — tf_arg","title":"Utility functions for tf-objects — tf_arg","text":"bunch methods & utilities say: get set respective attributes tf-object.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfmethods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions for tf-objects — tf_arg","text":"","code":"tf_arg(f)  tf_evaluations(f)  tf_count(f)  tf_domain(f)  tf_domain(x) <- value  tf_evaluator(f)  tf_evaluator(x) <- value  tf_basis(f, as_tfd = FALSE)  tf_arg(x) <- value  # S3 method for tfd_irreg tf_arg(x) <- value  # S3 method for tfd_reg tf_arg(x) <- value  # S3 method for tfb tf_arg(x) <- value  # S3 method for tfb coef(object, ...)  # S3 method for tf rev(x)  # S3 method for tf is.na(x)  # S3 method for tfd_irreg is.na(x)  is_tf(x)  is_tfd(x)  is_reg(x)  is_tfd_reg(x)  is_irreg(x)  is_tfd_irreg(x)  is_tfb(x)  is_tfb_spline(x)  is_tfb_fpc(x)"},{"path":"https://tidyfun.github.io/tf/reference/tfmethods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions for tf-objects — tf_arg","text":"f tf object x tf object value tf_evaluator<-: (bare quoted) name function can used interpolate tfd. Needs accept vector arguments x, arg, evaluations return evaluations function defined arg, evaluations x. tf_arg<-: (list ) new arg-values. tf_domain<-: sorted numeric vector 2 new endpoints domain. as_tfd basis returned tfd-vector evaluated tf_arg(f)? Defaults FALSE, returns matrix basis functions (columns) evaluated tf_arg(f) (rows). object usual ... dots","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfmethods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility functions for tf-objects — tf_arg","text":"either respective attribute , setters (assignment functions), input object modified properties.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tfsummaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions that summarize tf objects across argument values — tfsummaries","title":"Functions that summarize tf objects across argument values — tfsummaries","text":"return tf object containing respective functional statistic. See tf_fwise() scalar summaries (e.g. tf_fmean means, tf_fmax max. values) entry tf-vector.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfsummaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions that summarize tf objects across argument values — tfsummaries","text":"","code":"# S3 method for tf mean(x, ...)  # S3 method for tf median(x, na.rm = FALSE, depth = c(\"MBD\", \"pointwise\"), ...)  sd(x, na.rm = FALSE)  # S3 method for default sd(x, na.rm = FALSE)  # S3 method for tf sd(x, na.rm = FALSE)  var(x, y = NULL, na.rm = FALSE, use)  # S3 method for default var(x, y = NULL, na.rm = FALSE, use)  # S3 method for tf var(x, y = NULL, na.rm = FALSE, use)  # S3 method for tf summary(object, ...)"},{"path":"https://tidyfun.github.io/tf/reference/tfsummaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions that summarize tf objects across argument values — tfsummaries","text":"x tf object ... optional additional arguments. na.rm logical.  missing values removed? depth method used determine central element x, .e., median. One functional data depths available via tf_depth() \"pointwise\" pointwise median function. y NULL (default) vector, matrix data frame     compatible dimensions x.   default equivalent     y = x (efficient). use optional character string giving     method computing covariances presence     missing values.  must (abbreviation ) one strings     \"everything\", \".obs\", \"complete.obs\",     \"na..complete\", \"pairwise.complete.obs\". object tfd object","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfsummaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions that summarize tf objects across argument values — tfsummaries","text":"tf object computed result. summary.tf returns tf-vector mean function, variance function, functional median, functional range (.e., pointwise min/max) central half functions, defined tf_depth().","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/tfviz.html","id":null,"dir":"Reference","previous_headings":"","what":"base plots for tfs — plot.tf","title":"base plots for tfs — plot.tf","text":"base functions displaying functional data spaghetti- (.e., line plots) lasagna- (.e., heat map) flavors.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfviz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"base plots for tfs — plot.tf","text":"","code":"# S3 method for tf plot(   x,   y,   n_grid = 50,   points = is_irreg(x),   type = c(\"spaghetti\", \"lasagna\"),   alpha = min(1, max(0.05, 2/length(x))),   ... )  # S3 method for tf lines(x, arg, n_grid = 50, alpha = min(1, max(0.05, 2/length(x))), ...)  # S3 method for tf points(   x,   arg,   n_grid = NA,   alpha = min(1, max(0.05, 2/length(x))),   interpolate = FALSE,   ... )"},{"path":"https://tidyfun.github.io/tf/reference/tfviz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"base plots for tfs — plot.tf","text":"x tf object y (optional) numeric vector used arg (.e., x-axis...!) n_grid minimal size equidistant grid used plotting, defaults 50. See details. points original evaluation points marked points? Defaults TRUE irregular tfd FALSE others type \"spaghetti\": line plots, \"lasagna\": heat maps. alpha alpha-value (seegrDevices::rgb()) noodle transparency. Defaults 2/(. observations). Lower transparent. ... additional arguments matplot() (\"spaghetti\") image() (\"lasagna\") arg evaluation grid (vector) interpolate functions evaluated (.e., inter-/extrapolated) arg original data available? relevant tfd, defaults FALSE","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfviz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"base plots for tfs — plot.tf","text":"plotted tf-object, invisibly.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfviz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"base plots for tfs — plot.tf","text":"second argument y given, evaluation points (arg) functions given union tf's arg equidistant grid domain n_grid points. want see original data tfd-objects without inter-/extrapolation, use n_grid < 1 n_grid = NA.","code":""},{"path":"https://tidyfun.github.io/tf/reference/tfviz.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"base plots for tfs — plot.tf","text":"Swihart, J B, Caffo, Brian, James, D B, Strand, Matthew, Schwartz, S B, Punjabi, M N (2010). “Lasagna plots: saucy alternative spaghetti plots.” Epidemiology (Cambridge, Mass.), 21(5), 621--625.","code":""},{"path":"https://tidyfun.github.io/tf/reference/unique_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Make syntactically valid unique names — unique_id","title":"Make syntactically valid unique names — unique_id","text":"See .","code":""},{"path":"https://tidyfun.github.io/tf/reference/unique_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make syntactically valid unique names — unique_id","text":"","code":"unique_id(x)"},{"path":"https://tidyfun.github.io/tf/reference/unique_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make syntactically valid unique names — unique_id","text":"x input","code":""},{"path":"https://tidyfun.github.io/tf/reference/unique_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make syntactically valid unique names — unique_id","text":"x turned list.","code":""},{"path":[]},{"path":"https://tidyfun.github.io/tf/reference/vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"vctrs methods for tf objects — vec_cast.tfd_reg","title":"vctrs methods for tf objects — vec_cast.tfd_reg","text":"functions extensions allow tf vectors work vctrs.","code":""},{"path":"https://tidyfun.github.io/tf/reference/vctrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"vctrs methods for tf objects — vec_cast.tfd_reg","text":"","code":"# S3 method for tfd_reg vec_cast(x, to, ...)  # S3 method for tfd_irreg vec_cast(x, to, ...)  # S3 method for tfd_reg vec_cast.tfd_reg(x, to, ...)  # S3 method for tfd_irreg vec_cast.tfd_reg(x, to, ...)  # S3 method for tfb_spline vec_cast.tfd_reg(x, to, ...)  # S3 method for tfb_fpc vec_cast.tfd_reg(x, to, ...)  # S3 method for tfd_reg vec_cast.tfd_irreg(x, to, ...)  # S3 method for tfd_irreg vec_cast.tfd_irreg(x, to, ...)  # S3 method for tfb_spline vec_cast.tfd_irreg(x, to, ...)  # S3 method for tfb_fpc vec_cast.tfd_irreg(x, to, ...)  # S3 method for tfb_spline vec_cast(x, to, ...)  # S3 method for tfb_fpc vec_cast(x, to, ...)  # S3 method for tfb_spline vec_cast.tfb_spline(x, to, ...)  # S3 method for tfb_fpc vec_cast.tfb_spline(x, to, ...)  # S3 method for tfb_spline vec_cast.tfb_fpc(x, to, ...)  # S3 method for tfb_fpc vec_cast.tfb_fpc(x, to, ...)  # S3 method for tfd_reg vec_cast.tfb_spline(x, to, ...)  # S3 method for tfd_irreg vec_cast.tfb_spline(x, to, ...)  # S3 method for tfd_reg vec_cast.tfb_fpc(x, to, ...)  # S3 method for tfd_irreg vec_cast.tfb_fpc(x, to, ...)  # S3 method for tfd_reg vec_ptype2(x, y, ...)  # S3 method for tfd_reg vec_ptype2.tfd_reg(x, y, ...)  # S3 method for tfd_irreg vec_ptype2.tfd_reg(x, y, ...)  # S3 method for tfb_spline vec_ptype2.tfd_reg(x, y, ...)  # S3 method for tfb_fpc vec_ptype2.tfd_reg(x, y, ...)  # S3 method for tfd_irreg vec_ptype2(x, y, ...)  # S3 method for tfd_reg vec_ptype2.tfd_irreg(x, y, ...)  # S3 method for tfd_irreg vec_ptype2.tfd_irreg(x, y, ...)  # S3 method for tfb_spline vec_ptype2.tfd_irreg(x, y, ...)  # S3 method for tfb_fpc vec_ptype2.tfd_irreg(x, y, ...)  # S3 method for tfb_spline vec_ptype2(x, y, ...)  # S3 method for tfb_spline vec_ptype2.tfb_spline(x, y, ...)  # S3 method for tfb_fpc vec_ptype2.tfb_spline(x, y, ...)  # S3 method for tfd_reg vec_ptype2.tfb_spline(x, y, ...)  # S3 method for tfd_irreg vec_ptype2.tfb_spline(x, y, ...)  # S3 method for tfb_fpc vec_ptype2(x, y, ...)  # S3 method for tfb_spline vec_ptype2.tfb_fpc(x, y, ...)  # S3 method for tfb_fpc vec_ptype2.tfb_fpc(x, y, ...)  # S3 method for tfd_reg vec_ptype2.tfb_fpc(x, y, ...)  # S3 method for tfd_irreg vec_ptype2.tfb_fpc(x, y, ...)"},{"path":"https://tidyfun.github.io/tf/reference/vctrs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"vctrs methods for tf objects — vec_cast.tfd_reg","text":"x Vectors cast. Type cast . NULL, x returned . ... vec_cast_common(), vectors cast. vec_cast(), vec_cast_default(), vec_restore(), dots future extensions empty. y Vectors cast.","code":""},{"path":"https://tidyfun.github.io/tf/reference/vctrs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"vctrs methods for tf objects — vec_cast.tfd_reg","text":"vec_cast: casted tf-vector, vec_ptype2: common prototype","code":""},{"path":"https://tidyfun.github.io/tf/reference/vctrs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"vctrs methods for tf objects — vec_cast.tfd_reg","text":"Notes vec_cast: Use tf_rebase() change representations tf-vectors, methods internal use -- automatic/implicit casting tf objects tricky hard determine automatically whether operation lose precision (different bases different expressivity? different argument grids?), generally clear instances tf-subclasses considered \"richer\" objects. Rules casting: casted object's domain contain entire original domain, casting possible (lose data). Every cast evaluates (basis) functions different arg values lossy cast, since might lose precision (vctrs::maybe_lossy_cast). long casted object's domain contains entire original domain: every tfd_reg, tfd_irreg tfb can always cast equivalent tfd_irreg (may also change evaluator domain). every tfd_reg can always cast tfd_reg (may change evaluator domain) every tfb can cast losslessly tfd (regular irregular, note lossless original arg-grid) cast tfd tfb potentially lossy (know expressive chosen basis ) tfb identical bases domains can cast one another losslessly","code":""},{"path":[]}]
